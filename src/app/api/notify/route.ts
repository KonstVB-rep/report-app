import { NextRequest, NextResponse } from "next/server";

import axios from "axios";

import { EventInputType } from "@/feature/calendar/types";

// üîî –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendNotification(message: string, chatId: string) {
  try {
    console.log(process.env.TELEGRAM_API_URL,'*********************process.env.TELEGRAM_API_URL')
    const response = await axios.post(`${process.env.TELEGRAM_API_URL}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent(message)}`);

    return response;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
  }
}

export type EventInputTypeWithChatId = EventInputType & {
  chatId: string;
};

// üîÑ –û—Å–Ω–æ–≤–Ω–æ–π POST –º–µ—Ç–æ–¥
export async function POST(req: NextRequest) {
  try {
    const events = await req.json(); // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π

    if (!Array.isArray(events) || events.length === 0) {
      return NextResponse.json(
        { message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π" },
        { status: 400 }
      );
    }

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for (const event of events) {
      const { title, start, chatId } = event;

      if (!title || !start || !chatId) {
        return NextResponse.json(
          {
            message:
              "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–æ–±—ã—Ç–∏–π",
          },
          { status: 400 }
        );
      }

      const message = `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ: ${title}`;

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await sendNotification(message, chatId);

      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è: ${title}`,
          error
        );

      }
    }

    return NextResponse.json({ message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
    return NextResponse.json(
      { message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" },
      { status: 500 }
    );
  }
}


