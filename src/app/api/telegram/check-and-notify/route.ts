import { NextResponse } from "next/server";

import axios from "axios";

import { EventInputType } from "@/feature/calendar/types";
import {
  getEventsCalendarUserToday,
  getInfoChatNotificationChecked,
} from "@/feature/telegramBot/server";

async function sendNotificationsToTelegram(
  events: (EventInputType & { chatId: string })[]
) {
  try {
    const response = await axios.post(
      `${process.env.NEXT_PUBLIC_API_BASE_URL}/telegram/notify`,
      events,
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", response.data.message);
    return response.data.message;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
    throw error;
  }
}

// export async function GET() {
//   try {
//     console.log("üîÅ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", new Date());
//     const allChats = await getInfoChatNotificationChecked();

//     if (!allChats.length) {
//       return NextResponse.json({ message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤" });
//     }

//     const now = new Date();
//     now.setSeconds(0, 0);

//     const sendNotifications = allChats.map(
//       async (chat: { isActive: boolean; chatId: number; userId: string }) => {
//         console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞:", chat);

//         if (!chat.isActive || !chat.chatId || !chat.userId) {
//           console.warn("–ü—Ä–æ–ø—É—â–µ–Ω —á–∞—Ç: –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ");
//           return;
//         }

//         let events: EventInputType[] = [];
//         try {
//           events = await getEventsCalendarUserToday(chat.userId);
//         } catch (e) {
//           console.error(
//             `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è ${chat.userId}:`,
//             e
//           );
//           return;
//         }

//         if (events.length > 0) {
//           const eventsWithChatId = events.map((event) => ({
//             ...event,
//             chatId: String(chat.chatId),
//           }));

//           console.log(
//             `üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chat.userId} (${chat.chatId}):`,
//             eventsWithChatId.map((e) => e.title).join(", ")
//           );

//           try {
//             await sendNotificationsToTelegram(eventsWithChatId);
//           } catch (e) {
//             console.error(
//               `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chat.userId}`,
//               (e as Error).message
//             );
//           }
//         }
//       }
//     );

//     await Promise.all(sendNotifications);

//     return NextResponse.json({ message: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" });
//   } catch (error) {
//     console.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check-and-notify:", error);
//     return NextResponse.json(
//       {
//         message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
//         error: (error as Error).message,
//       },
//       { status: 500 }
//     );
//   }
// }

import { NextResponse } from "next/server";
import { getInfoChatNotificationChecked } from "@/shared/api/chat";
import { getEventsCalendarUserToday } from "@/shared/api/calendar";
import { sendNotificationsToTelegram } from "@/shared/api/telegram";

export async function GET() {
  try {
    const allChats = await getInfoChatNotificationChecked(); // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å chatId

    if (!allChats.length) {
      return NextResponse.json({ message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤" });
    }

    const now = new Date();
    now.setSeconds(0, 0); // –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

    for (const chat of allChats) {
      if (!chat.isActive || !chat.chatId || !chat.userId) continue;

      const events = await getEventsCalendarUserToday(chat.userId);
      if (!events?.length) continue;

      const upcomingEvents = events.filter((event) => {
        const eventStartTime = new Date(event.start);
        const thirtyMinutesBefore = new Date(eventStartTime.getTime() - 30 * 60 * 1000);
        const fifteenMinutesBefore = new Date(eventStartTime.getTime() - 15 * 60 * 1000);
        const exactStart = new Date(eventStartTime);

        thirtyMinutesBefore.setSeconds(0, 0);
        fifteenMinutesBefore.setSeconds(0, 0);
        exactStart.setSeconds(0, 0);

        return (
          (now.getTime() === thirtyMinutesBefore.getTime() ||
            now.getTime() === fifteenMinutesBefore.getTime() ||
            now.getTime() === exactStart.getTime()) &&
          now <= eventStartTime
        );
      });

      if (upcomingEvents.length > 0) {
        const eventsWithChatId = upcomingEvents.map((event) => ({
          ...event,
          chatId: String(chat.chatId),
        }));

        console.log(
          `üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chat.userId} (${chat.chatId}):`,
          eventsWithChatId.map((e) => e.title).join(", ")
        );

        await sendNotificationsToTelegram(eventsWithChatId);
      }
    }

    return NextResponse.json({ message: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ check-and-notify:", error);
    return NextResponse.json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" }, { status: 500 });
  }
}

