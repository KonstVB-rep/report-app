
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Retail
 * 
 */
export type Retail = $Result.DefaultSelection<Prisma.$RetailPayload>
/**
 * Model AdditionalContact
 * 
 */
export type AdditionalContact = $Result.DefaultSelection<Prisma.$AdditionalContactPayload>
/**
 * Model UserLogin
 * 
 */
export type UserLogin = $Result.DefaultSelection<Prisma.$UserLoginPayload>
/**
 * Model DealFile
 * 
 */
export type DealFile = $Result.DefaultSelection<Prisma.$DealFilePayload>
/**
 * Model UserFilter
 * 
 */
export type UserFilter = $Result.DefaultSelection<Prisma.$UserFilterPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PermissionEnum: {
  VIEW_USER_REPORT: 'VIEW_USER_REPORT',
  VIEW_UNION_REPORT: 'VIEW_UNION_REPORT',
  DOWNLOAD_REPORTS: 'DOWNLOAD_REPORTS',
  USER_MANAGEMENT: 'USER_MANAGEMENT',
  DEAL_MANAGEMENT: 'DEAL_MANAGEMENT'
};

export type PermissionEnum = (typeof PermissionEnum)[keyof typeof PermissionEnum]


export const DirectionProject: {
  PARKING: 'PARKING',
  GLK: 'GLK',
  SKD: 'SKD',
  KATOK: 'KATOK',
  MUSEUM: 'MUSEUM',
  SPORT: 'SPORT',
  FOK_BASIN: 'FOK_BASIN',
  BPS: 'BPS',
  PPS: 'PPS',
  PARK_ATTRACTION: 'PARK_ATTRACTION',
  STADIUM_ARENA: 'STADIUM_ARENA'
};

export type DirectionProject = (typeof DirectionProject)[keyof typeof DirectionProject]


export const DirectionRetail: {
  PARKING_EQUIPMENT: 'PARKING_EQUIPMENT',
  SCUD: 'SCUD',
  IDS_CONSUMABLES: 'IDS_CONSUMABLES',
  OTHER: 'OTHER'
};

export type DirectionRetail = (typeof DirectionRetail)[keyof typeof DirectionRetail]


export const DeliveryProject: {
  COMPLEX: 'COMPLEX',
  EQUIPMENT_SUPPLY: 'EQUIPMENT_SUPPLY',
  WORK_SERVICES: 'WORK_SERVICES',
  RENT: 'RENT',
  SOFTWARE_DELIVERY: 'SOFTWARE_DELIVERY',
  OTHER: 'OTHER'
};

export type DeliveryProject = (typeof DeliveryProject)[keyof typeof DeliveryProject]


export const DeliveryRetail: {
  EXPENDABLE_MATERIALS: 'EXPENDABLE_MATERIALS',
  SUPPLY: 'SUPPLY',
  WORK: 'WORK'
};

export type DeliveryRetail = (typeof DeliveryRetail)[keyof typeof DeliveryRetail]


export const StatusProject: {
  INVOICE_ISSUED: 'INVOICE_ISSUED',
  ACTUAL: 'ACTUAL',
  REJECT: 'REJECT',
  PAID: 'PAID',
  APPROVAL: 'APPROVAL',
  FIRST_CP_APPROVAL: 'FIRST_CP_APPROVAL',
  CONTRACT_ADVANCE_PAYMENT: 'CONTRACT_ADVANCE_PAYMENT',
  PROGRESS: 'PROGRESS',
  DELIVERY_WORKS: 'DELIVERY_WORKS',
  SIGN_ACTS_PAYMENT: 'SIGN_ACTS_PAYMENT',
  CLOSED: 'CLOSED'
};

export type StatusProject = (typeof StatusProject)[keyof typeof StatusProject]


export const StatusRetail: {
  FIRST_CP_APPROVAL: 'FIRST_CP_APPROVAL',
  APPROVAL: 'APPROVAL',
  ACTUAL: 'ACTUAL',
  REJECT: 'REJECT',
  INVOICE_ISSUED: 'INVOICE_ISSUED',
  PROGRESS: 'PROGRESS',
  PAID: 'PAID',
  CLOSED: 'CLOSED'
};

export type StatusRetail = (typeof StatusRetail)[keyof typeof StatusRetail]


export const DepartmentEnum: {
  SALES: 'SALES',
  TECHNICAL: 'TECHNICAL'
};

export type DepartmentEnum = (typeof DepartmentEnum)[keyof typeof DepartmentEnum]


export const Role: {
  DIRECTOR: 'DIRECTOR',
  EMPLOYEE: 'EMPLOYEE',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const DealType: {
  PROJECT: 'PROJECT',
  RETAIL: 'RETAIL'
};

export type DealType = (typeof DealType)[keyof typeof DealType]


export const StorageType: {
  YANDEX_DISK: 'YANDEX_DISK'
};

export type StorageType = (typeof StorageType)[keyof typeof StorageType]

}

export type PermissionEnum = $Enums.PermissionEnum

export const PermissionEnum: typeof $Enums.PermissionEnum

export type DirectionProject = $Enums.DirectionProject

export const DirectionProject: typeof $Enums.DirectionProject

export type DirectionRetail = $Enums.DirectionRetail

export const DirectionRetail: typeof $Enums.DirectionRetail

export type DeliveryProject = $Enums.DeliveryProject

export const DeliveryProject: typeof $Enums.DeliveryProject

export type DeliveryRetail = $Enums.DeliveryRetail

export const DeliveryRetail: typeof $Enums.DeliveryRetail

export type StatusProject = $Enums.StatusProject

export const StatusProject: typeof $Enums.StatusProject

export type StatusRetail = $Enums.StatusRetail

export const StatusRetail: typeof $Enums.StatusRetail

export type DepartmentEnum = $Enums.DepartmentEnum

export const DepartmentEnum: typeof $Enums.DepartmentEnum

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type DealType = $Enums.DealType

export const DealType: typeof $Enums.DealType

export type StorageType = $Enums.StorageType

export const StorageType: typeof $Enums.StorageType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.retail`: Exposes CRUD operations for the **Retail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Retails
    * const retails = await prisma.retail.findMany()
    * ```
    */
  get retail(): Prisma.RetailDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.additionalContact`: Exposes CRUD operations for the **AdditionalContact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdditionalContacts
    * const additionalContacts = await prisma.additionalContact.findMany()
    * ```
    */
  get additionalContact(): Prisma.AdditionalContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userLogin`: Exposes CRUD operations for the **UserLogin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLogins
    * const userLogins = await prisma.userLogin.findMany()
    * ```
    */
  get userLogin(): Prisma.UserLoginDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dealFile`: Exposes CRUD operations for the **DealFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DealFiles
    * const dealFiles = await prisma.dealFile.findMany()
    * ```
    */
  get dealFile(): Prisma.DealFileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userFilter`: Exposes CRUD operations for the **UserFilter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFilters
    * const userFilters = await prisma.userFilter.findMany()
    * ```
    */
  get userFilter(): Prisma.UserFilterDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserPermission: 'UserPermission',
    Permission: 'Permission',
    Department: 'Department',
    Project: 'Project',
    Retail: 'Retail',
    AdditionalContact: 'AdditionalContact',
    UserLogin: 'UserLogin',
    DealFile: 'DealFile',
    UserFilter: 'UserFilter'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userPermission" | "permission" | "department" | "project" | "retail" | "additionalContact" | "userLogin" | "dealFile" | "userFilter"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Retail: {
        payload: Prisma.$RetailPayload<ExtArgs>
        fields: Prisma.RetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RetailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RetailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetailPayload>
          }
          findFirst: {
            args: Prisma.RetailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RetailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetailPayload>
          }
          findMany: {
            args: Prisma.RetailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetailPayload>[]
          }
          create: {
            args: Prisma.RetailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetailPayload>
          }
          createMany: {
            args: Prisma.RetailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RetailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetailPayload>
          }
          update: {
            args: Prisma.RetailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetailPayload>
          }
          deleteMany: {
            args: Prisma.RetailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RetailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RetailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RetailPayload>
          }
          aggregate: {
            args: Prisma.RetailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRetail>
          }
          groupBy: {
            args: Prisma.RetailGroupByArgs<ExtArgs>
            result: $Utils.Optional<RetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.RetailCountArgs<ExtArgs>
            result: $Utils.Optional<RetailCountAggregateOutputType> | number
          }
        }
      }
      AdditionalContact: {
        payload: Prisma.$AdditionalContactPayload<ExtArgs>
        fields: Prisma.AdditionalContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdditionalContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdditionalContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalContactPayload>
          }
          findFirst: {
            args: Prisma.AdditionalContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdditionalContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalContactPayload>
          }
          findMany: {
            args: Prisma.AdditionalContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalContactPayload>[]
          }
          create: {
            args: Prisma.AdditionalContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalContactPayload>
          }
          createMany: {
            args: Prisma.AdditionalContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdditionalContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalContactPayload>
          }
          update: {
            args: Prisma.AdditionalContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalContactPayload>
          }
          deleteMany: {
            args: Prisma.AdditionalContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdditionalContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdditionalContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdditionalContactPayload>
          }
          aggregate: {
            args: Prisma.AdditionalContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdditionalContact>
          }
          groupBy: {
            args: Prisma.AdditionalContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdditionalContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdditionalContactCountArgs<ExtArgs>
            result: $Utils.Optional<AdditionalContactCountAggregateOutputType> | number
          }
        }
      }
      UserLogin: {
        payload: Prisma.$UserLoginPayload<ExtArgs>
        fields: Prisma.UserLoginFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLoginFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLoginPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLoginFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLoginPayload>
          }
          findFirst: {
            args: Prisma.UserLoginFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLoginPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLoginFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLoginPayload>
          }
          findMany: {
            args: Prisma.UserLoginFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLoginPayload>[]
          }
          create: {
            args: Prisma.UserLoginCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLoginPayload>
          }
          createMany: {
            args: Prisma.UserLoginCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserLoginDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLoginPayload>
          }
          update: {
            args: Prisma.UserLoginUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLoginPayload>
          }
          deleteMany: {
            args: Prisma.UserLoginDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLoginUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserLoginUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLoginPayload>
          }
          aggregate: {
            args: Prisma.UserLoginAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLogin>
          }
          groupBy: {
            args: Prisma.UserLoginGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLoginGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLoginCountArgs<ExtArgs>
            result: $Utils.Optional<UserLoginCountAggregateOutputType> | number
          }
        }
      }
      DealFile: {
        payload: Prisma.$DealFilePayload<ExtArgs>
        fields: Prisma.DealFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DealFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DealFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealFilePayload>
          }
          findFirst: {
            args: Prisma.DealFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DealFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealFilePayload>
          }
          findMany: {
            args: Prisma.DealFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealFilePayload>[]
          }
          create: {
            args: Prisma.DealFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealFilePayload>
          }
          createMany: {
            args: Prisma.DealFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DealFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealFilePayload>
          }
          update: {
            args: Prisma.DealFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealFilePayload>
          }
          deleteMany: {
            args: Prisma.DealFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DealFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DealFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealFilePayload>
          }
          aggregate: {
            args: Prisma.DealFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDealFile>
          }
          groupBy: {
            args: Prisma.DealFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<DealFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.DealFileCountArgs<ExtArgs>
            result: $Utils.Optional<DealFileCountAggregateOutputType> | number
          }
        }
      }
      UserFilter: {
        payload: Prisma.$UserFilterPayload<ExtArgs>
        fields: Prisma.UserFilterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFilterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFilterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFilterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFilterPayload>
          }
          findFirst: {
            args: Prisma.UserFilterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFilterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFilterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFilterPayload>
          }
          findMany: {
            args: Prisma.UserFilterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFilterPayload>[]
          }
          create: {
            args: Prisma.UserFilterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFilterPayload>
          }
          createMany: {
            args: Prisma.UserFilterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserFilterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFilterPayload>
          }
          update: {
            args: Prisma.UserFilterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFilterPayload>
          }
          deleteMany: {
            args: Prisma.UserFilterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserFilterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserFilterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFilterPayload>
          }
          aggregate: {
            args: Prisma.UserFilterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserFilter>
          }
          groupBy: {
            args: Prisma.UserFilterGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserFilterGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserFilterCountArgs<ExtArgs>
            result: $Utils.Optional<UserFilterCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userPermission?: UserPermissionOmit
    permission?: PermissionOmit
    department?: DepartmentOmit
    project?: ProjectOmit
    retail?: RetailOmit
    additionalContact?: AdditionalContactOmit
    userLogin?: UserLoginOmit
    dealFile?: DealFileOmit
    userFilter?: UserFilterOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    File: number
    projects: number
    retail: number
    login: number
    permissions: number
    userFilters: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    File?: boolean | UserCountOutputTypeCountFileArgs
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    retail?: boolean | UserCountOutputTypeCountRetailArgs
    login?: boolean | UserCountOutputTypeCountLoginArgs
    permissions?: boolean | UserCountOutputTypeCountPermissionsArgs
    userFilters?: boolean | UserCountOutputTypeCountUserFiltersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DealFileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RetailWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLoginArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLoginWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserFiltersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFilterWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    userPermissions: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userPermissions?: boolean | PermissionCountOutputTypeCountUserPermissionsArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountUserPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    users: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DepartmentCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    additionalContacts: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    additionalContacts?: boolean | ProjectCountOutputTypeCountAdditionalContactsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountAdditionalContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdditionalContactWhereInput
  }


  /**
   * Count Type RetailCountOutputType
   */

  export type RetailCountOutputType = {
    additionalContacts: number
  }

  export type RetailCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    additionalContacts?: boolean | RetailCountOutputTypeCountAdditionalContactsArgs
  }

  // Custom InputTypes
  /**
   * RetailCountOutputType without action
   */
  export type RetailCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RetailCountOutputType
     */
    select?: RetailCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RetailCountOutputType without action
   */
  export type RetailCountOutputTypeCountAdditionalContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdditionalContactWhereInput
  }


  /**
   * Count Type AdditionalContactCountOutputType
   */

  export type AdditionalContactCountOutputType = {
    projects: number
    retails: number
  }

  export type AdditionalContactCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | AdditionalContactCountOutputTypeCountProjectsArgs
    retails?: boolean | AdditionalContactCountOutputTypeCountRetailsArgs
  }

  // Custom InputTypes
  /**
   * AdditionalContactCountOutputType without action
   */
  export type AdditionalContactCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContactCountOutputType
     */
    select?: AdditionalContactCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdditionalContactCountOutputType without action
   */
  export type AdditionalContactCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * AdditionalContactCountOutputType without action
   */
  export type AdditionalContactCountOutputTypeCountRetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RetailWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    departmentId: number | null
  }

  export type UserSumAggregateOutputType = {
    departmentId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    phone: string | null
    user_password: string | null
    position: string | null
    departmentId: number | null
    role: $Enums.Role | null
    lastlogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    phone: string | null
    user_password: string | null
    position: string | null
    departmentId: number | null
    role: $Enums.Role | null
    lastlogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    phone: number
    user_password: number
    position: number
    departmentId: number
    role: number
    lastlogin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    departmentId?: true
  }

  export type UserSumAggregateInputType = {
    departmentId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    phone?: true
    user_password?: true
    position?: true
    departmentId?: true
    role?: true
    lastlogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    phone?: true
    user_password?: true
    position?: true
    departmentId?: true
    role?: true
    lastlogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    phone?: true
    user_password?: true
    position?: true
    departmentId?: true
    role?: true
    lastlogin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    phone?: boolean
    user_password?: boolean
    position?: boolean
    departmentId?: boolean
    role?: boolean
    lastlogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    directorOf?: boolean | User$directorOfArgs<ExtArgs>
    File?: boolean | User$FileArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    retail?: boolean | User$retailArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    login?: boolean | User$loginArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    userFilters?: boolean | User$userFiltersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    phone?: boolean
    user_password?: boolean
    position?: boolean
    departmentId?: boolean
    role?: boolean
    lastlogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "phone" | "user_password" | "position" | "departmentId" | "role" | "lastlogin" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    directorOf?: boolean | User$directorOfArgs<ExtArgs>
    File?: boolean | User$FileArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    retail?: boolean | User$retailArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    login?: boolean | User$loginArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    userFilters?: boolean | User$userFiltersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      directorOf: Prisma.$DepartmentPayload<ExtArgs> | null
      File: Prisma.$DealFilePayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      retail: Prisma.$RetailPayload<ExtArgs>[]
      department: Prisma.$DepartmentPayload<ExtArgs>
      login: Prisma.$UserLoginPayload<ExtArgs>[]
      permissions: Prisma.$UserPermissionPayload<ExtArgs>[]
      userFilters: Prisma.$UserFilterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      phone: string
      user_password: string
      position: string
      departmentId: number
      role: $Enums.Role
      lastlogin: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    directorOf<T extends User$directorOfArgs<ExtArgs> = {}>(args?: Subset<T, User$directorOfArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    File<T extends User$FileArgs<ExtArgs> = {}>(args?: Subset<T, User$FileArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    retail<T extends User$retailArgs<ExtArgs> = {}>(args?: Subset<T, User$retailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    login<T extends User$loginArgs<ExtArgs> = {}>(args?: Subset<T, User$loginArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    permissions<T extends User$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userFilters<T extends User$userFiltersArgs<ExtArgs> = {}>(args?: Subset<T, User$userFiltersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly user_password: FieldRef<"User", 'String'>
    readonly position: FieldRef<"User", 'String'>
    readonly departmentId: FieldRef<"User", 'Int'>
    readonly role: FieldRef<"User", 'Role'>
    readonly lastlogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.directorOf
   */
  export type User$directorOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * User.File
   */
  export type User$FileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    where?: DealFileWhereInput
    orderBy?: DealFileOrderByWithRelationInput | DealFileOrderByWithRelationInput[]
    cursor?: DealFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DealFileScalarFieldEnum | DealFileScalarFieldEnum[]
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.retail
   */
  export type User$retailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    where?: RetailWhereInput
    orderBy?: RetailOrderByWithRelationInput | RetailOrderByWithRelationInput[]
    cursor?: RetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RetailScalarFieldEnum | RetailScalarFieldEnum[]
  }

  /**
   * User.login
   */
  export type User$loginArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    where?: UserLoginWhereInput
    orderBy?: UserLoginOrderByWithRelationInput | UserLoginOrderByWithRelationInput[]
    cursor?: UserLoginWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLoginScalarFieldEnum | UserLoginScalarFieldEnum[]
  }

  /**
   * User.permissions
   */
  export type User$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User.userFilters
   */
  export type User$userFiltersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    where?: UserFilterWhereInput
    orderBy?: UserFilterOrderByWithRelationInput | UserFilterOrderByWithRelationInput[]
    cursor?: UserFilterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFilterScalarFieldEnum | UserFilterScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    permissionId: string | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    permissionId: string | null
  }

  export type UserPermissionCountAggregateOutputType = {
    id: number
    userId: number
    permissionId: number
    _all: number
  }


  export type UserPermissionMinAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
  }

  export type UserPermissionCountAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    id: string
    userId: string
    permissionId: string
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>



  export type UserPermissionSelectScalar = {
    id?: boolean
    userId?: boolean
    permissionId?: boolean
  }

  export type UserPermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "permissionId", ExtArgs["result"]["userPermission"]>
  export type UserPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $UserPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      permissionId: string
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }

  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPermissionFindUniqueArgs>(args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPermissionFindFirstArgs>(args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPermissionFindManyArgs>(args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
     */
    create<T extends UserPermissionCreateArgs>(args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPermissions.
     * @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPermissionCreateManyArgs>(args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
     */
    delete<T extends UserPermissionDeleteArgs>(args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPermissionUpdateArgs>(args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPermissionDeleteManyArgs>(args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPermissionUpdateManyArgs>(args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
     */
    upsert<T extends UserPermissionUpsertArgs>(args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPermission model
   */
  interface UserPermissionFieldRefs {
    readonly id: FieldRef<"UserPermission", 'String'>
    readonly userId: FieldRef<"UserPermission", 'String'>
    readonly permissionId: FieldRef<"UserPermission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }

  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to update.
     */
    limit?: number
  }

  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }

  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to delete.
     */
    limit?: number
  }

  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    name: $Enums.PermissionEnum | null
    description: string | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    name: $Enums.PermissionEnum | null
    description: string | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    name: $Enums.PermissionEnum
    description: string | null
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userPermissions?: boolean | Permission$userPermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>



  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type PermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description", ExtArgs["result"]["permission"]>
  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userPermissions?: boolean | Permission$userPermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      userPermissions: Prisma.$UserPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: $Enums.PermissionEnum
      description: string | null
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userPermissions<T extends Permission$userPermissionsArgs<ExtArgs> = {}>(args?: Subset<T, Permission$userPermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'PermissionEnum'>
    readonly description: FieldRef<"Permission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to delete.
     */
    limit?: number
  }

  /**
   * Permission.userPermissions
   */
  export type Permission$userPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    name: $Enums.DepartmentEnum | null
    directorId: string | null
    description: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    name: $Enums.DepartmentEnum | null
    directorId: string | null
    description: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    directorId: number
    description: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    directorId?: true
    description?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    directorId?: true
    description?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    directorId?: true
    description?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: number
    name: $Enums.DepartmentEnum
    directorId: string | null
    description: string
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    directorId?: boolean
    description?: boolean
    director?: boolean | Department$directorArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>



  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    directorId?: boolean
    description?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "directorId" | "description", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    director?: boolean | Department$directorArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      director: Prisma.$UserPayload<ExtArgs> | null
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: $Enums.DepartmentEnum
      directorId: string | null
      description: string
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    director<T extends Department$directorArgs<ExtArgs> = {}>(args?: Subset<T, Department$directorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends Department$usersArgs<ExtArgs> = {}>(args?: Subset<T, Department$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'Int'>
    readonly name: FieldRef<"Department", 'DepartmentEnum'>
    readonly directorId: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.director
   */
  export type Department$directorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.users
   */
  export type Department$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    amountCP: Decimal | null
    amountPurchase: Decimal | null
    amountWork: Decimal | null
    delta: Decimal | null
  }

  export type ProjectSumAggregateOutputType = {
    amountCP: Decimal | null
    amountPurchase: Decimal | null
    amountWork: Decimal | null
    delta: Decimal | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.DealType | null
    dateRequest: Date | null
    nameDeal: string | null
    nameObject: string | null
    direction: $Enums.DirectionProject | null
    deliveryType: $Enums.DeliveryProject | null
    contact: string | null
    phone: string | null
    email: string | null
    amountCP: Decimal | null
    amountPurchase: Decimal | null
    amountWork: Decimal | null
    delta: Decimal | null
    comments: string | null
    dealStatus: $Enums.StatusProject | null
    plannedDateConnection: Date | null
    resource: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.DealType | null
    dateRequest: Date | null
    nameDeal: string | null
    nameObject: string | null
    direction: $Enums.DirectionProject | null
    deliveryType: $Enums.DeliveryProject | null
    contact: string | null
    phone: string | null
    email: string | null
    amountCP: Decimal | null
    amountPurchase: Decimal | null
    amountWork: Decimal | null
    delta: Decimal | null
    comments: string | null
    dealStatus: $Enums.StatusProject | null
    plannedDateConnection: Date | null
    resource: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    dateRequest: number
    nameDeal: number
    nameObject: number
    direction: number
    deliveryType: number
    contact: number
    phone: number
    email: number
    amountCP: number
    amountPurchase: number
    amountWork: number
    delta: number
    comments: number
    dealStatus: number
    plannedDateConnection: number
    resource: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    amountCP?: true
    amountPurchase?: true
    amountWork?: true
    delta?: true
  }

  export type ProjectSumAggregateInputType = {
    amountCP?: true
    amountPurchase?: true
    amountWork?: true
    delta?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    dateRequest?: true
    nameDeal?: true
    nameObject?: true
    direction?: true
    deliveryType?: true
    contact?: true
    phone?: true
    email?: true
    amountCP?: true
    amountPurchase?: true
    amountWork?: true
    delta?: true
    comments?: true
    dealStatus?: true
    plannedDateConnection?: true
    resource?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    dateRequest?: true
    nameDeal?: true
    nameObject?: true
    direction?: true
    deliveryType?: true
    contact?: true
    phone?: true
    email?: true
    amountCP?: true
    amountPurchase?: true
    amountWork?: true
    delta?: true
    comments?: true
    dealStatus?: true
    plannedDateConnection?: true
    resource?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    dateRequest?: true
    nameDeal?: true
    nameObject?: true
    direction?: true
    deliveryType?: true
    contact?: true
    phone?: true
    email?: true
    amountCP?: true
    amountPurchase?: true
    amountWork?: true
    delta?: true
    comments?: true
    dealStatus?: true
    plannedDateConnection?: true
    resource?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    userId: string
    type: $Enums.DealType
    dateRequest: Date
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionProject
    deliveryType: $Enums.DeliveryProject | null
    contact: string
    phone: string | null
    email: string | null
    amountCP: Decimal | null
    amountPurchase: Decimal | null
    amountWork: Decimal | null
    delta: Decimal | null
    comments: string
    dealStatus: $Enums.StatusProject
    plannedDateConnection: Date | null
    resource: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    dateRequest?: boolean
    nameDeal?: boolean
    nameObject?: boolean
    direction?: boolean
    deliveryType?: boolean
    contact?: boolean
    phone?: boolean
    email?: boolean
    amountCP?: boolean
    amountPurchase?: boolean
    amountWork?: boolean
    delta?: boolean
    comments?: boolean
    dealStatus?: boolean
    plannedDateConnection?: boolean
    resource?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    additionalContacts?: boolean | Project$additionalContactsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>



  export type ProjectSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    dateRequest?: boolean
    nameDeal?: boolean
    nameObject?: boolean
    direction?: boolean
    deliveryType?: boolean
    contact?: boolean
    phone?: boolean
    email?: boolean
    amountCP?: boolean
    amountPurchase?: boolean
    amountWork?: boolean
    delta?: boolean
    comments?: boolean
    dealStatus?: boolean
    plannedDateConnection?: boolean
    resource?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "dateRequest" | "nameDeal" | "nameObject" | "direction" | "deliveryType" | "contact" | "phone" | "email" | "amountCP" | "amountPurchase" | "amountWork" | "delta" | "comments" | "dealStatus" | "plannedDateConnection" | "resource" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    additionalContacts?: boolean | Project$additionalContactsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      additionalContacts: Prisma.$AdditionalContactPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: $Enums.DealType
      dateRequest: Date
      nameDeal: string
      nameObject: string
      direction: $Enums.DirectionProject
      deliveryType: $Enums.DeliveryProject | null
      contact: string
      phone: string | null
      email: string | null
      amountCP: Prisma.Decimal | null
      amountPurchase: Prisma.Decimal | null
      amountWork: Prisma.Decimal | null
      delta: Prisma.Decimal | null
      comments: string
      dealStatus: $Enums.StatusProject
      plannedDateConnection: Date | null
      resource: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    additionalContacts<T extends Project$additionalContactsArgs<ExtArgs> = {}>(args?: Subset<T, Project$additionalContactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly userId: FieldRef<"Project", 'String'>
    readonly type: FieldRef<"Project", 'DealType'>
    readonly dateRequest: FieldRef<"Project", 'DateTime'>
    readonly nameDeal: FieldRef<"Project", 'String'>
    readonly nameObject: FieldRef<"Project", 'String'>
    readonly direction: FieldRef<"Project", 'DirectionProject'>
    readonly deliveryType: FieldRef<"Project", 'DeliveryProject'>
    readonly contact: FieldRef<"Project", 'String'>
    readonly phone: FieldRef<"Project", 'String'>
    readonly email: FieldRef<"Project", 'String'>
    readonly amountCP: FieldRef<"Project", 'Decimal'>
    readonly amountPurchase: FieldRef<"Project", 'Decimal'>
    readonly amountWork: FieldRef<"Project", 'Decimal'>
    readonly delta: FieldRef<"Project", 'Decimal'>
    readonly comments: FieldRef<"Project", 'String'>
    readonly dealStatus: FieldRef<"Project", 'StatusProject'>
    readonly plannedDateConnection: FieldRef<"Project", 'DateTime'>
    readonly resource: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.additionalContacts
   */
  export type Project$additionalContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    where?: AdditionalContactWhereInput
    orderBy?: AdditionalContactOrderByWithRelationInput | AdditionalContactOrderByWithRelationInput[]
    cursor?: AdditionalContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdditionalContactScalarFieldEnum | AdditionalContactScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Retail
   */

  export type AggregateRetail = {
    _count: RetailCountAggregateOutputType | null
    _avg: RetailAvgAggregateOutputType | null
    _sum: RetailSumAggregateOutputType | null
    _min: RetailMinAggregateOutputType | null
    _max: RetailMaxAggregateOutputType | null
  }

  export type RetailAvgAggregateOutputType = {
    amountCP: Decimal | null
    delta: Decimal | null
  }

  export type RetailSumAggregateOutputType = {
    amountCP: Decimal | null
    delta: Decimal | null
  }

  export type RetailMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.DealType | null
    dateRequest: Date | null
    nameDeal: string | null
    nameObject: string | null
    direction: $Enums.DirectionRetail | null
    deliveryType: $Enums.DeliveryRetail | null
    contact: string | null
    phone: string | null
    email: string | null
    amountCP: Decimal | null
    delta: Decimal | null
    dealStatus: $Enums.StatusRetail | null
    comments: string | null
    plannedDateConnection: Date | null
    resource: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RetailMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.DealType | null
    dateRequest: Date | null
    nameDeal: string | null
    nameObject: string | null
    direction: $Enums.DirectionRetail | null
    deliveryType: $Enums.DeliveryRetail | null
    contact: string | null
    phone: string | null
    email: string | null
    amountCP: Decimal | null
    delta: Decimal | null
    dealStatus: $Enums.StatusRetail | null
    comments: string | null
    plannedDateConnection: Date | null
    resource: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RetailCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    dateRequest: number
    nameDeal: number
    nameObject: number
    direction: number
    deliveryType: number
    contact: number
    phone: number
    email: number
    amountCP: number
    delta: number
    dealStatus: number
    comments: number
    plannedDateConnection: number
    resource: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RetailAvgAggregateInputType = {
    amountCP?: true
    delta?: true
  }

  export type RetailSumAggregateInputType = {
    amountCP?: true
    delta?: true
  }

  export type RetailMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    dateRequest?: true
    nameDeal?: true
    nameObject?: true
    direction?: true
    deliveryType?: true
    contact?: true
    phone?: true
    email?: true
    amountCP?: true
    delta?: true
    dealStatus?: true
    comments?: true
    plannedDateConnection?: true
    resource?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RetailMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    dateRequest?: true
    nameDeal?: true
    nameObject?: true
    direction?: true
    deliveryType?: true
    contact?: true
    phone?: true
    email?: true
    amountCP?: true
    delta?: true
    dealStatus?: true
    comments?: true
    plannedDateConnection?: true
    resource?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RetailCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    dateRequest?: true
    nameDeal?: true
    nameObject?: true
    direction?: true
    deliveryType?: true
    contact?: true
    phone?: true
    email?: true
    amountCP?: true
    delta?: true
    dealStatus?: true
    comments?: true
    plannedDateConnection?: true
    resource?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Retail to aggregate.
     */
    where?: RetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retails to fetch.
     */
    orderBy?: RetailOrderByWithRelationInput | RetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Retails
    **/
    _count?: true | RetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RetailMaxAggregateInputType
  }

  export type GetRetailAggregateType<T extends RetailAggregateArgs> = {
        [P in keyof T & keyof AggregateRetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRetail[P]>
      : GetScalarType<T[P], AggregateRetail[P]>
  }




  export type RetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RetailWhereInput
    orderBy?: RetailOrderByWithAggregationInput | RetailOrderByWithAggregationInput[]
    by: RetailScalarFieldEnum[] | RetailScalarFieldEnum
    having?: RetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RetailCountAggregateInputType | true
    _avg?: RetailAvgAggregateInputType
    _sum?: RetailSumAggregateInputType
    _min?: RetailMinAggregateInputType
    _max?: RetailMaxAggregateInputType
  }

  export type RetailGroupByOutputType = {
    id: string
    userId: string
    type: $Enums.DealType
    dateRequest: Date
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionRetail
    deliveryType: $Enums.DeliveryRetail | null
    contact: string
    phone: string | null
    email: string | null
    amountCP: Decimal | null
    delta: Decimal | null
    dealStatus: $Enums.StatusRetail
    comments: string
    plannedDateConnection: Date | null
    resource: string | null
    createdAt: Date
    updatedAt: Date
    _count: RetailCountAggregateOutputType | null
    _avg: RetailAvgAggregateOutputType | null
    _sum: RetailSumAggregateOutputType | null
    _min: RetailMinAggregateOutputType | null
    _max: RetailMaxAggregateOutputType | null
  }

  type GetRetailGroupByPayload<T extends RetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RetailGroupByOutputType[P]>
            : GetScalarType<T[P], RetailGroupByOutputType[P]>
        }
      >
    >


  export type RetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    dateRequest?: boolean
    nameDeal?: boolean
    nameObject?: boolean
    direction?: boolean
    deliveryType?: boolean
    contact?: boolean
    phone?: boolean
    email?: boolean
    amountCP?: boolean
    delta?: boolean
    dealStatus?: boolean
    comments?: boolean
    plannedDateConnection?: boolean
    resource?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    additionalContacts?: boolean | Retail$additionalContactsArgs<ExtArgs>
    _count?: boolean | RetailCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["retail"]>



  export type RetailSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    dateRequest?: boolean
    nameDeal?: boolean
    nameObject?: boolean
    direction?: boolean
    deliveryType?: boolean
    contact?: boolean
    phone?: boolean
    email?: boolean
    amountCP?: boolean
    delta?: boolean
    dealStatus?: boolean
    comments?: boolean
    plannedDateConnection?: boolean
    resource?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RetailOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "dateRequest" | "nameDeal" | "nameObject" | "direction" | "deliveryType" | "contact" | "phone" | "email" | "amountCP" | "delta" | "dealStatus" | "comments" | "plannedDateConnection" | "resource" | "createdAt" | "updatedAt", ExtArgs["result"]["retail"]>
  export type RetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    additionalContacts?: boolean | Retail$additionalContactsArgs<ExtArgs>
    _count?: boolean | RetailCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Retail"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      additionalContacts: Prisma.$AdditionalContactPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: $Enums.DealType
      dateRequest: Date
      nameDeal: string
      nameObject: string
      direction: $Enums.DirectionRetail
      deliveryType: $Enums.DeliveryRetail | null
      contact: string
      phone: string | null
      email: string | null
      amountCP: Prisma.Decimal | null
      delta: Prisma.Decimal | null
      dealStatus: $Enums.StatusRetail
      comments: string
      plannedDateConnection: Date | null
      resource: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["retail"]>
    composites: {}
  }

  type RetailGetPayload<S extends boolean | null | undefined | RetailDefaultArgs> = $Result.GetResult<Prisma.$RetailPayload, S>

  type RetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RetailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RetailCountAggregateInputType | true
    }

  export interface RetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Retail'], meta: { name: 'Retail' } }
    /**
     * Find zero or one Retail that matches the filter.
     * @param {RetailFindUniqueArgs} args - Arguments to find a Retail
     * @example
     * // Get one Retail
     * const retail = await prisma.retail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RetailFindUniqueArgs>(args: SelectSubset<T, RetailFindUniqueArgs<ExtArgs>>): Prisma__RetailClient<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Retail that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RetailFindUniqueOrThrowArgs} args - Arguments to find a Retail
     * @example
     * // Get one Retail
     * const retail = await prisma.retail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RetailFindUniqueOrThrowArgs>(args: SelectSubset<T, RetailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RetailClient<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Retail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetailFindFirstArgs} args - Arguments to find a Retail
     * @example
     * // Get one Retail
     * const retail = await prisma.retail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RetailFindFirstArgs>(args?: SelectSubset<T, RetailFindFirstArgs<ExtArgs>>): Prisma__RetailClient<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Retail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetailFindFirstOrThrowArgs} args - Arguments to find a Retail
     * @example
     * // Get one Retail
     * const retail = await prisma.retail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RetailFindFirstOrThrowArgs>(args?: SelectSubset<T, RetailFindFirstOrThrowArgs<ExtArgs>>): Prisma__RetailClient<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Retails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Retails
     * const retails = await prisma.retail.findMany()
     * 
     * // Get first 10 Retails
     * const retails = await prisma.retail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const retailWithIdOnly = await prisma.retail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RetailFindManyArgs>(args?: SelectSubset<T, RetailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Retail.
     * @param {RetailCreateArgs} args - Arguments to create a Retail.
     * @example
     * // Create one Retail
     * const Retail = await prisma.retail.create({
     *   data: {
     *     // ... data to create a Retail
     *   }
     * })
     * 
     */
    create<T extends RetailCreateArgs>(args: SelectSubset<T, RetailCreateArgs<ExtArgs>>): Prisma__RetailClient<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Retails.
     * @param {RetailCreateManyArgs} args - Arguments to create many Retails.
     * @example
     * // Create many Retails
     * const retail = await prisma.retail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RetailCreateManyArgs>(args?: SelectSubset<T, RetailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Retail.
     * @param {RetailDeleteArgs} args - Arguments to delete one Retail.
     * @example
     * // Delete one Retail
     * const Retail = await prisma.retail.delete({
     *   where: {
     *     // ... filter to delete one Retail
     *   }
     * })
     * 
     */
    delete<T extends RetailDeleteArgs>(args: SelectSubset<T, RetailDeleteArgs<ExtArgs>>): Prisma__RetailClient<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Retail.
     * @param {RetailUpdateArgs} args - Arguments to update one Retail.
     * @example
     * // Update one Retail
     * const retail = await prisma.retail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RetailUpdateArgs>(args: SelectSubset<T, RetailUpdateArgs<ExtArgs>>): Prisma__RetailClient<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Retails.
     * @param {RetailDeleteManyArgs} args - Arguments to filter Retails to delete.
     * @example
     * // Delete a few Retails
     * const { count } = await prisma.retail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RetailDeleteManyArgs>(args?: SelectSubset<T, RetailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Retails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Retails
     * const retail = await prisma.retail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RetailUpdateManyArgs>(args: SelectSubset<T, RetailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Retail.
     * @param {RetailUpsertArgs} args - Arguments to update or create a Retail.
     * @example
     * // Update or create a Retail
     * const retail = await prisma.retail.upsert({
     *   create: {
     *     // ... data to create a Retail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Retail we want to update
     *   }
     * })
     */
    upsert<T extends RetailUpsertArgs>(args: SelectSubset<T, RetailUpsertArgs<ExtArgs>>): Prisma__RetailClient<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Retails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetailCountArgs} args - Arguments to filter Retails to count.
     * @example
     * // Count the number of Retails
     * const count = await prisma.retail.count({
     *   where: {
     *     // ... the filter for the Retails we want to count
     *   }
     * })
    **/
    count<T extends RetailCountArgs>(
      args?: Subset<T, RetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Retail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RetailAggregateArgs>(args: Subset<T, RetailAggregateArgs>): Prisma.PrismaPromise<GetRetailAggregateType<T>>

    /**
     * Group by Retail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RetailGroupByArgs['orderBy'] }
        : { orderBy?: RetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Retail model
   */
  readonly fields: RetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Retail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    additionalContacts<T extends Retail$additionalContactsArgs<ExtArgs> = {}>(args?: Subset<T, Retail$additionalContactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Retail model
   */
  interface RetailFieldRefs {
    readonly id: FieldRef<"Retail", 'String'>
    readonly userId: FieldRef<"Retail", 'String'>
    readonly type: FieldRef<"Retail", 'DealType'>
    readonly dateRequest: FieldRef<"Retail", 'DateTime'>
    readonly nameDeal: FieldRef<"Retail", 'String'>
    readonly nameObject: FieldRef<"Retail", 'String'>
    readonly direction: FieldRef<"Retail", 'DirectionRetail'>
    readonly deliveryType: FieldRef<"Retail", 'DeliveryRetail'>
    readonly contact: FieldRef<"Retail", 'String'>
    readonly phone: FieldRef<"Retail", 'String'>
    readonly email: FieldRef<"Retail", 'String'>
    readonly amountCP: FieldRef<"Retail", 'Decimal'>
    readonly delta: FieldRef<"Retail", 'Decimal'>
    readonly dealStatus: FieldRef<"Retail", 'StatusRetail'>
    readonly comments: FieldRef<"Retail", 'String'>
    readonly plannedDateConnection: FieldRef<"Retail", 'DateTime'>
    readonly resource: FieldRef<"Retail", 'String'>
    readonly createdAt: FieldRef<"Retail", 'DateTime'>
    readonly updatedAt: FieldRef<"Retail", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Retail findUnique
   */
  export type RetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    /**
     * Filter, which Retail to fetch.
     */
    where: RetailWhereUniqueInput
  }

  /**
   * Retail findUniqueOrThrow
   */
  export type RetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    /**
     * Filter, which Retail to fetch.
     */
    where: RetailWhereUniqueInput
  }

  /**
   * Retail findFirst
   */
  export type RetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    /**
     * Filter, which Retail to fetch.
     */
    where?: RetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retails to fetch.
     */
    orderBy?: RetailOrderByWithRelationInput | RetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Retails.
     */
    cursor?: RetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Retails.
     */
    distinct?: RetailScalarFieldEnum | RetailScalarFieldEnum[]
  }

  /**
   * Retail findFirstOrThrow
   */
  export type RetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    /**
     * Filter, which Retail to fetch.
     */
    where?: RetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retails to fetch.
     */
    orderBy?: RetailOrderByWithRelationInput | RetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Retails.
     */
    cursor?: RetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Retails.
     */
    distinct?: RetailScalarFieldEnum | RetailScalarFieldEnum[]
  }

  /**
   * Retail findMany
   */
  export type RetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    /**
     * Filter, which Retails to fetch.
     */
    where?: RetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retails to fetch.
     */
    orderBy?: RetailOrderByWithRelationInput | RetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Retails.
     */
    cursor?: RetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retails.
     */
    skip?: number
    distinct?: RetailScalarFieldEnum | RetailScalarFieldEnum[]
  }

  /**
   * Retail create
   */
  export type RetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    /**
     * The data needed to create a Retail.
     */
    data: XOR<RetailCreateInput, RetailUncheckedCreateInput>
  }

  /**
   * Retail createMany
   */
  export type RetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Retails.
     */
    data: RetailCreateManyInput | RetailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Retail update
   */
  export type RetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    /**
     * The data needed to update a Retail.
     */
    data: XOR<RetailUpdateInput, RetailUncheckedUpdateInput>
    /**
     * Choose, which Retail to update.
     */
    where: RetailWhereUniqueInput
  }

  /**
   * Retail updateMany
   */
  export type RetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Retails.
     */
    data: XOR<RetailUpdateManyMutationInput, RetailUncheckedUpdateManyInput>
    /**
     * Filter which Retails to update
     */
    where?: RetailWhereInput
    /**
     * Limit how many Retails to update.
     */
    limit?: number
  }

  /**
   * Retail upsert
   */
  export type RetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    /**
     * The filter to search for the Retail to update in case it exists.
     */
    where: RetailWhereUniqueInput
    /**
     * In case the Retail found by the `where` argument doesn't exist, create a new Retail with this data.
     */
    create: XOR<RetailCreateInput, RetailUncheckedCreateInput>
    /**
     * In case the Retail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RetailUpdateInput, RetailUncheckedUpdateInput>
  }

  /**
   * Retail delete
   */
  export type RetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    /**
     * Filter which Retail to delete.
     */
    where: RetailWhereUniqueInput
  }

  /**
   * Retail deleteMany
   */
  export type RetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Retails to delete
     */
    where?: RetailWhereInput
    /**
     * Limit how many Retails to delete.
     */
    limit?: number
  }

  /**
   * Retail.additionalContacts
   */
  export type Retail$additionalContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    where?: AdditionalContactWhereInput
    orderBy?: AdditionalContactOrderByWithRelationInput | AdditionalContactOrderByWithRelationInput[]
    cursor?: AdditionalContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdditionalContactScalarFieldEnum | AdditionalContactScalarFieldEnum[]
  }

  /**
   * Retail without action
   */
  export type RetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
  }


  /**
   * Model AdditionalContact
   */

  export type AggregateAdditionalContact = {
    _count: AdditionalContactCountAggregateOutputType | null
    _min: AdditionalContactMinAggregateOutputType | null
    _max: AdditionalContactMaxAggregateOutputType | null
  }

  export type AdditionalContactMinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    position: string | null
  }

  export type AdditionalContactMaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    position: string | null
  }

  export type AdditionalContactCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    position: number
    _all: number
  }


  export type AdditionalContactMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    position?: true
  }

  export type AdditionalContactMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    position?: true
  }

  export type AdditionalContactCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    position?: true
    _all?: true
  }

  export type AdditionalContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdditionalContact to aggregate.
     */
    where?: AdditionalContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdditionalContacts to fetch.
     */
    orderBy?: AdditionalContactOrderByWithRelationInput | AdditionalContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdditionalContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdditionalContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdditionalContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdditionalContacts
    **/
    _count?: true | AdditionalContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdditionalContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdditionalContactMaxAggregateInputType
  }

  export type GetAdditionalContactAggregateType<T extends AdditionalContactAggregateArgs> = {
        [P in keyof T & keyof AggregateAdditionalContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdditionalContact[P]>
      : GetScalarType<T[P], AggregateAdditionalContact[P]>
  }




  export type AdditionalContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdditionalContactWhereInput
    orderBy?: AdditionalContactOrderByWithAggregationInput | AdditionalContactOrderByWithAggregationInput[]
    by: AdditionalContactScalarFieldEnum[] | AdditionalContactScalarFieldEnum
    having?: AdditionalContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdditionalContactCountAggregateInputType | true
    _min?: AdditionalContactMinAggregateInputType
    _max?: AdditionalContactMaxAggregateInputType
  }

  export type AdditionalContactGroupByOutputType = {
    id: string
    name: string
    phone: string | null
    email: string | null
    position: string | null
    _count: AdditionalContactCountAggregateOutputType | null
    _min: AdditionalContactMinAggregateOutputType | null
    _max: AdditionalContactMaxAggregateOutputType | null
  }

  type GetAdditionalContactGroupByPayload<T extends AdditionalContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdditionalContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdditionalContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdditionalContactGroupByOutputType[P]>
            : GetScalarType<T[P], AdditionalContactGroupByOutputType[P]>
        }
      >
    >


  export type AdditionalContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    position?: boolean
    projects?: boolean | AdditionalContact$projectsArgs<ExtArgs>
    retails?: boolean | AdditionalContact$retailsArgs<ExtArgs>
    _count?: boolean | AdditionalContactCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["additionalContact"]>



  export type AdditionalContactSelectScalar = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    position?: boolean
  }

  export type AdditionalContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "phone" | "email" | "position", ExtArgs["result"]["additionalContact"]>
  export type AdditionalContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | AdditionalContact$projectsArgs<ExtArgs>
    retails?: boolean | AdditionalContact$retailsArgs<ExtArgs>
    _count?: boolean | AdditionalContactCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AdditionalContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdditionalContact"
    objects: {
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      retails: Prisma.$RetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      phone: string | null
      email: string | null
      position: string | null
    }, ExtArgs["result"]["additionalContact"]>
    composites: {}
  }

  type AdditionalContactGetPayload<S extends boolean | null | undefined | AdditionalContactDefaultArgs> = $Result.GetResult<Prisma.$AdditionalContactPayload, S>

  type AdditionalContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdditionalContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdditionalContactCountAggregateInputType | true
    }

  export interface AdditionalContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdditionalContact'], meta: { name: 'AdditionalContact' } }
    /**
     * Find zero or one AdditionalContact that matches the filter.
     * @param {AdditionalContactFindUniqueArgs} args - Arguments to find a AdditionalContact
     * @example
     * // Get one AdditionalContact
     * const additionalContact = await prisma.additionalContact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdditionalContactFindUniqueArgs>(args: SelectSubset<T, AdditionalContactFindUniqueArgs<ExtArgs>>): Prisma__AdditionalContactClient<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdditionalContact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdditionalContactFindUniqueOrThrowArgs} args - Arguments to find a AdditionalContact
     * @example
     * // Get one AdditionalContact
     * const additionalContact = await prisma.additionalContact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdditionalContactFindUniqueOrThrowArgs>(args: SelectSubset<T, AdditionalContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdditionalContactClient<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdditionalContact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalContactFindFirstArgs} args - Arguments to find a AdditionalContact
     * @example
     * // Get one AdditionalContact
     * const additionalContact = await prisma.additionalContact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdditionalContactFindFirstArgs>(args?: SelectSubset<T, AdditionalContactFindFirstArgs<ExtArgs>>): Prisma__AdditionalContactClient<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdditionalContact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalContactFindFirstOrThrowArgs} args - Arguments to find a AdditionalContact
     * @example
     * // Get one AdditionalContact
     * const additionalContact = await prisma.additionalContact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdditionalContactFindFirstOrThrowArgs>(args?: SelectSubset<T, AdditionalContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdditionalContactClient<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdditionalContacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdditionalContacts
     * const additionalContacts = await prisma.additionalContact.findMany()
     * 
     * // Get first 10 AdditionalContacts
     * const additionalContacts = await prisma.additionalContact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const additionalContactWithIdOnly = await prisma.additionalContact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdditionalContactFindManyArgs>(args?: SelectSubset<T, AdditionalContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdditionalContact.
     * @param {AdditionalContactCreateArgs} args - Arguments to create a AdditionalContact.
     * @example
     * // Create one AdditionalContact
     * const AdditionalContact = await prisma.additionalContact.create({
     *   data: {
     *     // ... data to create a AdditionalContact
     *   }
     * })
     * 
     */
    create<T extends AdditionalContactCreateArgs>(args: SelectSubset<T, AdditionalContactCreateArgs<ExtArgs>>): Prisma__AdditionalContactClient<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdditionalContacts.
     * @param {AdditionalContactCreateManyArgs} args - Arguments to create many AdditionalContacts.
     * @example
     * // Create many AdditionalContacts
     * const additionalContact = await prisma.additionalContact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdditionalContactCreateManyArgs>(args?: SelectSubset<T, AdditionalContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AdditionalContact.
     * @param {AdditionalContactDeleteArgs} args - Arguments to delete one AdditionalContact.
     * @example
     * // Delete one AdditionalContact
     * const AdditionalContact = await prisma.additionalContact.delete({
     *   where: {
     *     // ... filter to delete one AdditionalContact
     *   }
     * })
     * 
     */
    delete<T extends AdditionalContactDeleteArgs>(args: SelectSubset<T, AdditionalContactDeleteArgs<ExtArgs>>): Prisma__AdditionalContactClient<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdditionalContact.
     * @param {AdditionalContactUpdateArgs} args - Arguments to update one AdditionalContact.
     * @example
     * // Update one AdditionalContact
     * const additionalContact = await prisma.additionalContact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdditionalContactUpdateArgs>(args: SelectSubset<T, AdditionalContactUpdateArgs<ExtArgs>>): Prisma__AdditionalContactClient<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdditionalContacts.
     * @param {AdditionalContactDeleteManyArgs} args - Arguments to filter AdditionalContacts to delete.
     * @example
     * // Delete a few AdditionalContacts
     * const { count } = await prisma.additionalContact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdditionalContactDeleteManyArgs>(args?: SelectSubset<T, AdditionalContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdditionalContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdditionalContacts
     * const additionalContact = await prisma.additionalContact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdditionalContactUpdateManyArgs>(args: SelectSubset<T, AdditionalContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdditionalContact.
     * @param {AdditionalContactUpsertArgs} args - Arguments to update or create a AdditionalContact.
     * @example
     * // Update or create a AdditionalContact
     * const additionalContact = await prisma.additionalContact.upsert({
     *   create: {
     *     // ... data to create a AdditionalContact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdditionalContact we want to update
     *   }
     * })
     */
    upsert<T extends AdditionalContactUpsertArgs>(args: SelectSubset<T, AdditionalContactUpsertArgs<ExtArgs>>): Prisma__AdditionalContactClient<$Result.GetResult<Prisma.$AdditionalContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdditionalContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalContactCountArgs} args - Arguments to filter AdditionalContacts to count.
     * @example
     * // Count the number of AdditionalContacts
     * const count = await prisma.additionalContact.count({
     *   where: {
     *     // ... the filter for the AdditionalContacts we want to count
     *   }
     * })
    **/
    count<T extends AdditionalContactCountArgs>(
      args?: Subset<T, AdditionalContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdditionalContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdditionalContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdditionalContactAggregateArgs>(args: Subset<T, AdditionalContactAggregateArgs>): Prisma.PrismaPromise<GetAdditionalContactAggregateType<T>>

    /**
     * Group by AdditionalContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdditionalContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdditionalContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdditionalContactGroupByArgs['orderBy'] }
        : { orderBy?: AdditionalContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdditionalContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdditionalContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdditionalContact model
   */
  readonly fields: AdditionalContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdditionalContact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdditionalContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends AdditionalContact$projectsArgs<ExtArgs> = {}>(args?: Subset<T, AdditionalContact$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    retails<T extends AdditionalContact$retailsArgs<ExtArgs> = {}>(args?: Subset<T, AdditionalContact$retailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdditionalContact model
   */
  interface AdditionalContactFieldRefs {
    readonly id: FieldRef<"AdditionalContact", 'String'>
    readonly name: FieldRef<"AdditionalContact", 'String'>
    readonly phone: FieldRef<"AdditionalContact", 'String'>
    readonly email: FieldRef<"AdditionalContact", 'String'>
    readonly position: FieldRef<"AdditionalContact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AdditionalContact findUnique
   */
  export type AdditionalContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalContact to fetch.
     */
    where: AdditionalContactWhereUniqueInput
  }

  /**
   * AdditionalContact findUniqueOrThrow
   */
  export type AdditionalContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalContact to fetch.
     */
    where: AdditionalContactWhereUniqueInput
  }

  /**
   * AdditionalContact findFirst
   */
  export type AdditionalContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalContact to fetch.
     */
    where?: AdditionalContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdditionalContacts to fetch.
     */
    orderBy?: AdditionalContactOrderByWithRelationInput | AdditionalContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdditionalContacts.
     */
    cursor?: AdditionalContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdditionalContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdditionalContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdditionalContacts.
     */
    distinct?: AdditionalContactScalarFieldEnum | AdditionalContactScalarFieldEnum[]
  }

  /**
   * AdditionalContact findFirstOrThrow
   */
  export type AdditionalContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalContact to fetch.
     */
    where?: AdditionalContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdditionalContacts to fetch.
     */
    orderBy?: AdditionalContactOrderByWithRelationInput | AdditionalContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdditionalContacts.
     */
    cursor?: AdditionalContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdditionalContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdditionalContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdditionalContacts.
     */
    distinct?: AdditionalContactScalarFieldEnum | AdditionalContactScalarFieldEnum[]
  }

  /**
   * AdditionalContact findMany
   */
  export type AdditionalContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    /**
     * Filter, which AdditionalContacts to fetch.
     */
    where?: AdditionalContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdditionalContacts to fetch.
     */
    orderBy?: AdditionalContactOrderByWithRelationInput | AdditionalContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdditionalContacts.
     */
    cursor?: AdditionalContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdditionalContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdditionalContacts.
     */
    skip?: number
    distinct?: AdditionalContactScalarFieldEnum | AdditionalContactScalarFieldEnum[]
  }

  /**
   * AdditionalContact create
   */
  export type AdditionalContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    /**
     * The data needed to create a AdditionalContact.
     */
    data: XOR<AdditionalContactCreateInput, AdditionalContactUncheckedCreateInput>
  }

  /**
   * AdditionalContact createMany
   */
  export type AdditionalContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdditionalContacts.
     */
    data: AdditionalContactCreateManyInput | AdditionalContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdditionalContact update
   */
  export type AdditionalContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    /**
     * The data needed to update a AdditionalContact.
     */
    data: XOR<AdditionalContactUpdateInput, AdditionalContactUncheckedUpdateInput>
    /**
     * Choose, which AdditionalContact to update.
     */
    where: AdditionalContactWhereUniqueInput
  }

  /**
   * AdditionalContact updateMany
   */
  export type AdditionalContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdditionalContacts.
     */
    data: XOR<AdditionalContactUpdateManyMutationInput, AdditionalContactUncheckedUpdateManyInput>
    /**
     * Filter which AdditionalContacts to update
     */
    where?: AdditionalContactWhereInput
    /**
     * Limit how many AdditionalContacts to update.
     */
    limit?: number
  }

  /**
   * AdditionalContact upsert
   */
  export type AdditionalContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    /**
     * The filter to search for the AdditionalContact to update in case it exists.
     */
    where: AdditionalContactWhereUniqueInput
    /**
     * In case the AdditionalContact found by the `where` argument doesn't exist, create a new AdditionalContact with this data.
     */
    create: XOR<AdditionalContactCreateInput, AdditionalContactUncheckedCreateInput>
    /**
     * In case the AdditionalContact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdditionalContactUpdateInput, AdditionalContactUncheckedUpdateInput>
  }

  /**
   * AdditionalContact delete
   */
  export type AdditionalContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
    /**
     * Filter which AdditionalContact to delete.
     */
    where: AdditionalContactWhereUniqueInput
  }

  /**
   * AdditionalContact deleteMany
   */
  export type AdditionalContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdditionalContacts to delete
     */
    where?: AdditionalContactWhereInput
    /**
     * Limit how many AdditionalContacts to delete.
     */
    limit?: number
  }

  /**
   * AdditionalContact.projects
   */
  export type AdditionalContact$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * AdditionalContact.retails
   */
  export type AdditionalContact$retailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Retail
     */
    select?: RetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Retail
     */
    omit?: RetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RetailInclude<ExtArgs> | null
    where?: RetailWhereInput
    orderBy?: RetailOrderByWithRelationInput | RetailOrderByWithRelationInput[]
    cursor?: RetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RetailScalarFieldEnum | RetailScalarFieldEnum[]
  }

  /**
   * AdditionalContact without action
   */
  export type AdditionalContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdditionalContact
     */
    select?: AdditionalContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdditionalContact
     */
    omit?: AdditionalContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdditionalContactInclude<ExtArgs> | null
  }


  /**
   * Model UserLogin
   */

  export type AggregateUserLogin = {
    _count: UserLoginCountAggregateOutputType | null
    _min: UserLoginMinAggregateOutputType | null
    _max: UserLoginMaxAggregateOutputType | null
  }

  export type UserLoginMinAggregateOutputType = {
    id: string | null
    userId: string | null
    loginAt: Date | null
  }

  export type UserLoginMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    loginAt: Date | null
  }

  export type UserLoginCountAggregateOutputType = {
    id: number
    userId: number
    loginAt: number
    _all: number
  }


  export type UserLoginMinAggregateInputType = {
    id?: true
    userId?: true
    loginAt?: true
  }

  export type UserLoginMaxAggregateInputType = {
    id?: true
    userId?: true
    loginAt?: true
  }

  export type UserLoginCountAggregateInputType = {
    id?: true
    userId?: true
    loginAt?: true
    _all?: true
  }

  export type UserLoginAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLogin to aggregate.
     */
    where?: UserLoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLogins to fetch.
     */
    orderBy?: UserLoginOrderByWithRelationInput | UserLoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLogins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLogins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLogins
    **/
    _count?: true | UserLoginCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLoginMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLoginMaxAggregateInputType
  }

  export type GetUserLoginAggregateType<T extends UserLoginAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLogin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLogin[P]>
      : GetScalarType<T[P], AggregateUserLogin[P]>
  }




  export type UserLoginGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLoginWhereInput
    orderBy?: UserLoginOrderByWithAggregationInput | UserLoginOrderByWithAggregationInput[]
    by: UserLoginScalarFieldEnum[] | UserLoginScalarFieldEnum
    having?: UserLoginScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLoginCountAggregateInputType | true
    _min?: UserLoginMinAggregateInputType
    _max?: UserLoginMaxAggregateInputType
  }

  export type UserLoginGroupByOutputType = {
    id: string
    userId: string
    loginAt: Date
    _count: UserLoginCountAggregateOutputType | null
    _min: UserLoginMinAggregateOutputType | null
    _max: UserLoginMaxAggregateOutputType | null
  }

  type GetUserLoginGroupByPayload<T extends UserLoginGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLoginGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLoginGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLoginGroupByOutputType[P]>
            : GetScalarType<T[P], UserLoginGroupByOutputType[P]>
        }
      >
    >


  export type UserLoginSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    loginAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLogin"]>



  export type UserLoginSelectScalar = {
    id?: boolean
    userId?: boolean
    loginAt?: boolean
  }

  export type UserLoginOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "loginAt", ExtArgs["result"]["userLogin"]>
  export type UserLoginInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserLoginPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLogin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      loginAt: Date
    }, ExtArgs["result"]["userLogin"]>
    composites: {}
  }

  type UserLoginGetPayload<S extends boolean | null | undefined | UserLoginDefaultArgs> = $Result.GetResult<Prisma.$UserLoginPayload, S>

  type UserLoginCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserLoginFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserLoginCountAggregateInputType | true
    }

  export interface UserLoginDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLogin'], meta: { name: 'UserLogin' } }
    /**
     * Find zero or one UserLogin that matches the filter.
     * @param {UserLoginFindUniqueArgs} args - Arguments to find a UserLogin
     * @example
     * // Get one UserLogin
     * const userLogin = await prisma.userLogin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLoginFindUniqueArgs>(args: SelectSubset<T, UserLoginFindUniqueArgs<ExtArgs>>): Prisma__UserLoginClient<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserLogin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserLoginFindUniqueOrThrowArgs} args - Arguments to find a UserLogin
     * @example
     * // Get one UserLogin
     * const userLogin = await prisma.userLogin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLoginFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLoginFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLoginClient<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLogin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLoginFindFirstArgs} args - Arguments to find a UserLogin
     * @example
     * // Get one UserLogin
     * const userLogin = await prisma.userLogin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLoginFindFirstArgs>(args?: SelectSubset<T, UserLoginFindFirstArgs<ExtArgs>>): Prisma__UserLoginClient<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLogin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLoginFindFirstOrThrowArgs} args - Arguments to find a UserLogin
     * @example
     * // Get one UserLogin
     * const userLogin = await prisma.userLogin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLoginFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLoginFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLoginClient<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserLogins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLoginFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLogins
     * const userLogins = await prisma.userLogin.findMany()
     * 
     * // Get first 10 UserLogins
     * const userLogins = await prisma.userLogin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userLoginWithIdOnly = await prisma.userLogin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserLoginFindManyArgs>(args?: SelectSubset<T, UserLoginFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserLogin.
     * @param {UserLoginCreateArgs} args - Arguments to create a UserLogin.
     * @example
     * // Create one UserLogin
     * const UserLogin = await prisma.userLogin.create({
     *   data: {
     *     // ... data to create a UserLogin
     *   }
     * })
     * 
     */
    create<T extends UserLoginCreateArgs>(args: SelectSubset<T, UserLoginCreateArgs<ExtArgs>>): Prisma__UserLoginClient<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserLogins.
     * @param {UserLoginCreateManyArgs} args - Arguments to create many UserLogins.
     * @example
     * // Create many UserLogins
     * const userLogin = await prisma.userLogin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLoginCreateManyArgs>(args?: SelectSubset<T, UserLoginCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserLogin.
     * @param {UserLoginDeleteArgs} args - Arguments to delete one UserLogin.
     * @example
     * // Delete one UserLogin
     * const UserLogin = await prisma.userLogin.delete({
     *   where: {
     *     // ... filter to delete one UserLogin
     *   }
     * })
     * 
     */
    delete<T extends UserLoginDeleteArgs>(args: SelectSubset<T, UserLoginDeleteArgs<ExtArgs>>): Prisma__UserLoginClient<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserLogin.
     * @param {UserLoginUpdateArgs} args - Arguments to update one UserLogin.
     * @example
     * // Update one UserLogin
     * const userLogin = await prisma.userLogin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLoginUpdateArgs>(args: SelectSubset<T, UserLoginUpdateArgs<ExtArgs>>): Prisma__UserLoginClient<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserLogins.
     * @param {UserLoginDeleteManyArgs} args - Arguments to filter UserLogins to delete.
     * @example
     * // Delete a few UserLogins
     * const { count } = await prisma.userLogin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLoginDeleteManyArgs>(args?: SelectSubset<T, UserLoginDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLogins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLoginUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLogins
     * const userLogin = await prisma.userLogin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLoginUpdateManyArgs>(args: SelectSubset<T, UserLoginUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLogin.
     * @param {UserLoginUpsertArgs} args - Arguments to update or create a UserLogin.
     * @example
     * // Update or create a UserLogin
     * const userLogin = await prisma.userLogin.upsert({
     *   create: {
     *     // ... data to create a UserLogin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLogin we want to update
     *   }
     * })
     */
    upsert<T extends UserLoginUpsertArgs>(args: SelectSubset<T, UserLoginUpsertArgs<ExtArgs>>): Prisma__UserLoginClient<$Result.GetResult<Prisma.$UserLoginPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserLogins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLoginCountArgs} args - Arguments to filter UserLogins to count.
     * @example
     * // Count the number of UserLogins
     * const count = await prisma.userLogin.count({
     *   where: {
     *     // ... the filter for the UserLogins we want to count
     *   }
     * })
    **/
    count<T extends UserLoginCountArgs>(
      args?: Subset<T, UserLoginCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLoginCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLogin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLoginAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLoginAggregateArgs>(args: Subset<T, UserLoginAggregateArgs>): Prisma.PrismaPromise<GetUserLoginAggregateType<T>>

    /**
     * Group by UserLogin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLoginGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLoginGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLoginGroupByArgs['orderBy'] }
        : { orderBy?: UserLoginGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLoginGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLoginGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLogin model
   */
  readonly fields: UserLoginFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLogin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLoginClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLogin model
   */
  interface UserLoginFieldRefs {
    readonly id: FieldRef<"UserLogin", 'String'>
    readonly userId: FieldRef<"UserLogin", 'String'>
    readonly loginAt: FieldRef<"UserLogin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserLogin findUnique
   */
  export type UserLoginFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    /**
     * Filter, which UserLogin to fetch.
     */
    where: UserLoginWhereUniqueInput
  }

  /**
   * UserLogin findUniqueOrThrow
   */
  export type UserLoginFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    /**
     * Filter, which UserLogin to fetch.
     */
    where: UserLoginWhereUniqueInput
  }

  /**
   * UserLogin findFirst
   */
  export type UserLoginFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    /**
     * Filter, which UserLogin to fetch.
     */
    where?: UserLoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLogins to fetch.
     */
    orderBy?: UserLoginOrderByWithRelationInput | UserLoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLogins.
     */
    cursor?: UserLoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLogins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLogins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLogins.
     */
    distinct?: UserLoginScalarFieldEnum | UserLoginScalarFieldEnum[]
  }

  /**
   * UserLogin findFirstOrThrow
   */
  export type UserLoginFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    /**
     * Filter, which UserLogin to fetch.
     */
    where?: UserLoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLogins to fetch.
     */
    orderBy?: UserLoginOrderByWithRelationInput | UserLoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLogins.
     */
    cursor?: UserLoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLogins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLogins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLogins.
     */
    distinct?: UserLoginScalarFieldEnum | UserLoginScalarFieldEnum[]
  }

  /**
   * UserLogin findMany
   */
  export type UserLoginFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    /**
     * Filter, which UserLogins to fetch.
     */
    where?: UserLoginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLogins to fetch.
     */
    orderBy?: UserLoginOrderByWithRelationInput | UserLoginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLogins.
     */
    cursor?: UserLoginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLogins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLogins.
     */
    skip?: number
    distinct?: UserLoginScalarFieldEnum | UserLoginScalarFieldEnum[]
  }

  /**
   * UserLogin create
   */
  export type UserLoginCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLogin.
     */
    data: XOR<UserLoginCreateInput, UserLoginUncheckedCreateInput>
  }

  /**
   * UserLogin createMany
   */
  export type UserLoginCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLogins.
     */
    data: UserLoginCreateManyInput | UserLoginCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLogin update
   */
  export type UserLoginUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLogin.
     */
    data: XOR<UserLoginUpdateInput, UserLoginUncheckedUpdateInput>
    /**
     * Choose, which UserLogin to update.
     */
    where: UserLoginWhereUniqueInput
  }

  /**
   * UserLogin updateMany
   */
  export type UserLoginUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLogins.
     */
    data: XOR<UserLoginUpdateManyMutationInput, UserLoginUncheckedUpdateManyInput>
    /**
     * Filter which UserLogins to update
     */
    where?: UserLoginWhereInput
    /**
     * Limit how many UserLogins to update.
     */
    limit?: number
  }

  /**
   * UserLogin upsert
   */
  export type UserLoginUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLogin to update in case it exists.
     */
    where: UserLoginWhereUniqueInput
    /**
     * In case the UserLogin found by the `where` argument doesn't exist, create a new UserLogin with this data.
     */
    create: XOR<UserLoginCreateInput, UserLoginUncheckedCreateInput>
    /**
     * In case the UserLogin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLoginUpdateInput, UserLoginUncheckedUpdateInput>
  }

  /**
   * UserLogin delete
   */
  export type UserLoginDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
    /**
     * Filter which UserLogin to delete.
     */
    where: UserLoginWhereUniqueInput
  }

  /**
   * UserLogin deleteMany
   */
  export type UserLoginDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLogins to delete
     */
    where?: UserLoginWhereInput
    /**
     * Limit how many UserLogins to delete.
     */
    limit?: number
  }

  /**
   * UserLogin without action
   */
  export type UserLoginDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLogin
     */
    select?: UserLoginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLogin
     */
    omit?: UserLoginOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLoginInclude<ExtArgs> | null
  }


  /**
   * Model DealFile
   */

  export type AggregateDealFile = {
    _count: DealFileCountAggregateOutputType | null
    _min: DealFileMinAggregateOutputType | null
    _max: DealFileMaxAggregateOutputType | null
  }

  export type DealFileMinAggregateOutputType = {
    id: string | null
    name: string | null
    localPath: string | null
    storageType: $Enums.StorageType | null
    userId: string | null
    dealId: string | null
    dealType: $Enums.DealType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DealFileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    localPath: string | null
    storageType: $Enums.StorageType | null
    userId: string | null
    dealId: string | null
    dealType: $Enums.DealType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DealFileCountAggregateOutputType = {
    id: number
    name: number
    localPath: number
    storageType: number
    userId: number
    dealId: number
    dealType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DealFileMinAggregateInputType = {
    id?: true
    name?: true
    localPath?: true
    storageType?: true
    userId?: true
    dealId?: true
    dealType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DealFileMaxAggregateInputType = {
    id?: true
    name?: true
    localPath?: true
    storageType?: true
    userId?: true
    dealId?: true
    dealType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DealFileCountAggregateInputType = {
    id?: true
    name?: true
    localPath?: true
    storageType?: true
    userId?: true
    dealId?: true
    dealType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DealFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DealFile to aggregate.
     */
    where?: DealFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealFiles to fetch.
     */
    orderBy?: DealFileOrderByWithRelationInput | DealFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DealFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DealFiles
    **/
    _count?: true | DealFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DealFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DealFileMaxAggregateInputType
  }

  export type GetDealFileAggregateType<T extends DealFileAggregateArgs> = {
        [P in keyof T & keyof AggregateDealFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDealFile[P]>
      : GetScalarType<T[P], AggregateDealFile[P]>
  }




  export type DealFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DealFileWhereInput
    orderBy?: DealFileOrderByWithAggregationInput | DealFileOrderByWithAggregationInput[]
    by: DealFileScalarFieldEnum[] | DealFileScalarFieldEnum
    having?: DealFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DealFileCountAggregateInputType | true
    _min?: DealFileMinAggregateInputType
    _max?: DealFileMaxAggregateInputType
  }

  export type DealFileGroupByOutputType = {
    id: string
    name: string
    localPath: string
    storageType: $Enums.StorageType
    userId: string
    dealId: string
    dealType: $Enums.DealType
    createdAt: Date
    updatedAt: Date
    _count: DealFileCountAggregateOutputType | null
    _min: DealFileMinAggregateOutputType | null
    _max: DealFileMaxAggregateOutputType | null
  }

  type GetDealFileGroupByPayload<T extends DealFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DealFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DealFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DealFileGroupByOutputType[P]>
            : GetScalarType<T[P], DealFileGroupByOutputType[P]>
        }
      >
    >


  export type DealFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    localPath?: boolean
    storageType?: boolean
    userId?: boolean
    dealId?: boolean
    dealType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dealFile"]>



  export type DealFileSelectScalar = {
    id?: boolean
    name?: boolean
    localPath?: boolean
    storageType?: boolean
    userId?: boolean
    dealId?: boolean
    dealType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DealFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "localPath" | "storageType" | "userId" | "dealId" | "dealType" | "createdAt" | "updatedAt", ExtArgs["result"]["dealFile"]>
  export type DealFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DealFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DealFile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      localPath: string
      storageType: $Enums.StorageType
      userId: string
      dealId: string
      dealType: $Enums.DealType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dealFile"]>
    composites: {}
  }

  type DealFileGetPayload<S extends boolean | null | undefined | DealFileDefaultArgs> = $Result.GetResult<Prisma.$DealFilePayload, S>

  type DealFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DealFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DealFileCountAggregateInputType | true
    }

  export interface DealFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DealFile'], meta: { name: 'DealFile' } }
    /**
     * Find zero or one DealFile that matches the filter.
     * @param {DealFileFindUniqueArgs} args - Arguments to find a DealFile
     * @example
     * // Get one DealFile
     * const dealFile = await prisma.dealFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DealFileFindUniqueArgs>(args: SelectSubset<T, DealFileFindUniqueArgs<ExtArgs>>): Prisma__DealFileClient<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DealFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DealFileFindUniqueOrThrowArgs} args - Arguments to find a DealFile
     * @example
     * // Get one DealFile
     * const dealFile = await prisma.dealFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DealFileFindUniqueOrThrowArgs>(args: SelectSubset<T, DealFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DealFileClient<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DealFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFileFindFirstArgs} args - Arguments to find a DealFile
     * @example
     * // Get one DealFile
     * const dealFile = await prisma.dealFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DealFileFindFirstArgs>(args?: SelectSubset<T, DealFileFindFirstArgs<ExtArgs>>): Prisma__DealFileClient<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DealFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFileFindFirstOrThrowArgs} args - Arguments to find a DealFile
     * @example
     * // Get one DealFile
     * const dealFile = await prisma.dealFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DealFileFindFirstOrThrowArgs>(args?: SelectSubset<T, DealFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__DealFileClient<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DealFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DealFiles
     * const dealFiles = await prisma.dealFile.findMany()
     * 
     * // Get first 10 DealFiles
     * const dealFiles = await prisma.dealFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dealFileWithIdOnly = await prisma.dealFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DealFileFindManyArgs>(args?: SelectSubset<T, DealFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DealFile.
     * @param {DealFileCreateArgs} args - Arguments to create a DealFile.
     * @example
     * // Create one DealFile
     * const DealFile = await prisma.dealFile.create({
     *   data: {
     *     // ... data to create a DealFile
     *   }
     * })
     * 
     */
    create<T extends DealFileCreateArgs>(args: SelectSubset<T, DealFileCreateArgs<ExtArgs>>): Prisma__DealFileClient<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DealFiles.
     * @param {DealFileCreateManyArgs} args - Arguments to create many DealFiles.
     * @example
     * // Create many DealFiles
     * const dealFile = await prisma.dealFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DealFileCreateManyArgs>(args?: SelectSubset<T, DealFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DealFile.
     * @param {DealFileDeleteArgs} args - Arguments to delete one DealFile.
     * @example
     * // Delete one DealFile
     * const DealFile = await prisma.dealFile.delete({
     *   where: {
     *     // ... filter to delete one DealFile
     *   }
     * })
     * 
     */
    delete<T extends DealFileDeleteArgs>(args: SelectSubset<T, DealFileDeleteArgs<ExtArgs>>): Prisma__DealFileClient<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DealFile.
     * @param {DealFileUpdateArgs} args - Arguments to update one DealFile.
     * @example
     * // Update one DealFile
     * const dealFile = await prisma.dealFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DealFileUpdateArgs>(args: SelectSubset<T, DealFileUpdateArgs<ExtArgs>>): Prisma__DealFileClient<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DealFiles.
     * @param {DealFileDeleteManyArgs} args - Arguments to filter DealFiles to delete.
     * @example
     * // Delete a few DealFiles
     * const { count } = await prisma.dealFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DealFileDeleteManyArgs>(args?: SelectSubset<T, DealFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DealFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DealFiles
     * const dealFile = await prisma.dealFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DealFileUpdateManyArgs>(args: SelectSubset<T, DealFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DealFile.
     * @param {DealFileUpsertArgs} args - Arguments to update or create a DealFile.
     * @example
     * // Update or create a DealFile
     * const dealFile = await prisma.dealFile.upsert({
     *   create: {
     *     // ... data to create a DealFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DealFile we want to update
     *   }
     * })
     */
    upsert<T extends DealFileUpsertArgs>(args: SelectSubset<T, DealFileUpsertArgs<ExtArgs>>): Prisma__DealFileClient<$Result.GetResult<Prisma.$DealFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DealFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFileCountArgs} args - Arguments to filter DealFiles to count.
     * @example
     * // Count the number of DealFiles
     * const count = await prisma.dealFile.count({
     *   where: {
     *     // ... the filter for the DealFiles we want to count
     *   }
     * })
    **/
    count<T extends DealFileCountArgs>(
      args?: Subset<T, DealFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DealFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DealFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DealFileAggregateArgs>(args: Subset<T, DealFileAggregateArgs>): Prisma.PrismaPromise<GetDealFileAggregateType<T>>

    /**
     * Group by DealFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DealFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DealFileGroupByArgs['orderBy'] }
        : { orderBy?: DealFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DealFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDealFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DealFile model
   */
  readonly fields: DealFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DealFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DealFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DealFile model
   */
  interface DealFileFieldRefs {
    readonly id: FieldRef<"DealFile", 'String'>
    readonly name: FieldRef<"DealFile", 'String'>
    readonly localPath: FieldRef<"DealFile", 'String'>
    readonly storageType: FieldRef<"DealFile", 'StorageType'>
    readonly userId: FieldRef<"DealFile", 'String'>
    readonly dealId: FieldRef<"DealFile", 'String'>
    readonly dealType: FieldRef<"DealFile", 'DealType'>
    readonly createdAt: FieldRef<"DealFile", 'DateTime'>
    readonly updatedAt: FieldRef<"DealFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DealFile findUnique
   */
  export type DealFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    /**
     * Filter, which DealFile to fetch.
     */
    where: DealFileWhereUniqueInput
  }

  /**
   * DealFile findUniqueOrThrow
   */
  export type DealFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    /**
     * Filter, which DealFile to fetch.
     */
    where: DealFileWhereUniqueInput
  }

  /**
   * DealFile findFirst
   */
  export type DealFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    /**
     * Filter, which DealFile to fetch.
     */
    where?: DealFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealFiles to fetch.
     */
    orderBy?: DealFileOrderByWithRelationInput | DealFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DealFiles.
     */
    cursor?: DealFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DealFiles.
     */
    distinct?: DealFileScalarFieldEnum | DealFileScalarFieldEnum[]
  }

  /**
   * DealFile findFirstOrThrow
   */
  export type DealFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    /**
     * Filter, which DealFile to fetch.
     */
    where?: DealFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealFiles to fetch.
     */
    orderBy?: DealFileOrderByWithRelationInput | DealFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DealFiles.
     */
    cursor?: DealFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DealFiles.
     */
    distinct?: DealFileScalarFieldEnum | DealFileScalarFieldEnum[]
  }

  /**
   * DealFile findMany
   */
  export type DealFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    /**
     * Filter, which DealFiles to fetch.
     */
    where?: DealFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealFiles to fetch.
     */
    orderBy?: DealFileOrderByWithRelationInput | DealFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DealFiles.
     */
    cursor?: DealFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealFiles.
     */
    skip?: number
    distinct?: DealFileScalarFieldEnum | DealFileScalarFieldEnum[]
  }

  /**
   * DealFile create
   */
  export type DealFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    /**
     * The data needed to create a DealFile.
     */
    data: XOR<DealFileCreateInput, DealFileUncheckedCreateInput>
  }

  /**
   * DealFile createMany
   */
  export type DealFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DealFiles.
     */
    data: DealFileCreateManyInput | DealFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DealFile update
   */
  export type DealFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    /**
     * The data needed to update a DealFile.
     */
    data: XOR<DealFileUpdateInput, DealFileUncheckedUpdateInput>
    /**
     * Choose, which DealFile to update.
     */
    where: DealFileWhereUniqueInput
  }

  /**
   * DealFile updateMany
   */
  export type DealFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DealFiles.
     */
    data: XOR<DealFileUpdateManyMutationInput, DealFileUncheckedUpdateManyInput>
    /**
     * Filter which DealFiles to update
     */
    where?: DealFileWhereInput
    /**
     * Limit how many DealFiles to update.
     */
    limit?: number
  }

  /**
   * DealFile upsert
   */
  export type DealFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    /**
     * The filter to search for the DealFile to update in case it exists.
     */
    where: DealFileWhereUniqueInput
    /**
     * In case the DealFile found by the `where` argument doesn't exist, create a new DealFile with this data.
     */
    create: XOR<DealFileCreateInput, DealFileUncheckedCreateInput>
    /**
     * In case the DealFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DealFileUpdateInput, DealFileUncheckedUpdateInput>
  }

  /**
   * DealFile delete
   */
  export type DealFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
    /**
     * Filter which DealFile to delete.
     */
    where: DealFileWhereUniqueInput
  }

  /**
   * DealFile deleteMany
   */
  export type DealFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DealFiles to delete
     */
    where?: DealFileWhereInput
    /**
     * Limit how many DealFiles to delete.
     */
    limit?: number
  }

  /**
   * DealFile without action
   */
  export type DealFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealFile
     */
    select?: DealFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DealFile
     */
    omit?: DealFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealFileInclude<ExtArgs> | null
  }


  /**
   * Model UserFilter
   */

  export type AggregateUserFilter = {
    _count: UserFilterCountAggregateOutputType | null
    _min: UserFilterMinAggregateOutputType | null
    _max: UserFilterMaxAggregateOutputType | null
  }

  export type UserFilterMinAggregateOutputType = {
    id: string | null
    userId: string | null
    filterName: string | null
    filterValue: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserFilterMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    filterName: string | null
    filterValue: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserFilterCountAggregateOutputType = {
    id: number
    userId: number
    filterName: number
    filterValue: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserFilterMinAggregateInputType = {
    id?: true
    userId?: true
    filterName?: true
    filterValue?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserFilterMaxAggregateInputType = {
    id?: true
    userId?: true
    filterName?: true
    filterValue?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserFilterCountAggregateInputType = {
    id?: true
    userId?: true
    filterName?: true
    filterValue?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserFilterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFilter to aggregate.
     */
    where?: UserFilterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFilters to fetch.
     */
    orderBy?: UserFilterOrderByWithRelationInput | UserFilterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserFilterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFilters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFilters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFilters
    **/
    _count?: true | UserFilterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFilterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFilterMaxAggregateInputType
  }

  export type GetUserFilterAggregateType<T extends UserFilterAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFilter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFilter[P]>
      : GetScalarType<T[P], AggregateUserFilter[P]>
  }




  export type UserFilterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFilterWhereInput
    orderBy?: UserFilterOrderByWithAggregationInput | UserFilterOrderByWithAggregationInput[]
    by: UserFilterScalarFieldEnum[] | UserFilterScalarFieldEnum
    having?: UserFilterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFilterCountAggregateInputType | true
    _min?: UserFilterMinAggregateInputType
    _max?: UserFilterMaxAggregateInputType
  }

  export type UserFilterGroupByOutputType = {
    id: string
    userId: string
    filterName: string
    filterValue: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserFilterCountAggregateOutputType | null
    _min: UserFilterMinAggregateOutputType | null
    _max: UserFilterMaxAggregateOutputType | null
  }

  type GetUserFilterGroupByPayload<T extends UserFilterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserFilterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFilterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFilterGroupByOutputType[P]>
            : GetScalarType<T[P], UserFilterGroupByOutputType[P]>
        }
      >
    >


  export type UserFilterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    filterName?: boolean
    filterValue?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFilter"]>



  export type UserFilterSelectScalar = {
    id?: boolean
    userId?: boolean
    filterName?: boolean
    filterValue?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserFilterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "filterName" | "filterValue" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["userFilter"]>
  export type UserFilterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserFilterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserFilter"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      filterName: string
      filterValue: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userFilter"]>
    composites: {}
  }

  type UserFilterGetPayload<S extends boolean | null | undefined | UserFilterDefaultArgs> = $Result.GetResult<Prisma.$UserFilterPayload, S>

  type UserFilterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFilterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserFilterCountAggregateInputType | true
    }

  export interface UserFilterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserFilter'], meta: { name: 'UserFilter' } }
    /**
     * Find zero or one UserFilter that matches the filter.
     * @param {UserFilterFindUniqueArgs} args - Arguments to find a UserFilter
     * @example
     * // Get one UserFilter
     * const userFilter = await prisma.userFilter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFilterFindUniqueArgs>(args: SelectSubset<T, UserFilterFindUniqueArgs<ExtArgs>>): Prisma__UserFilterClient<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserFilter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFilterFindUniqueOrThrowArgs} args - Arguments to find a UserFilter
     * @example
     * // Get one UserFilter
     * const userFilter = await prisma.userFilter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFilterFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFilterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserFilterClient<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFilter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFilterFindFirstArgs} args - Arguments to find a UserFilter
     * @example
     * // Get one UserFilter
     * const userFilter = await prisma.userFilter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFilterFindFirstArgs>(args?: SelectSubset<T, UserFilterFindFirstArgs<ExtArgs>>): Prisma__UserFilterClient<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFilter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFilterFindFirstOrThrowArgs} args - Arguments to find a UserFilter
     * @example
     * // Get one UserFilter
     * const userFilter = await prisma.userFilter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFilterFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFilterFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserFilterClient<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserFilters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFilterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFilters
     * const userFilters = await prisma.userFilter.findMany()
     * 
     * // Get first 10 UserFilters
     * const userFilters = await prisma.userFilter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userFilterWithIdOnly = await prisma.userFilter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFilterFindManyArgs>(args?: SelectSubset<T, UserFilterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserFilter.
     * @param {UserFilterCreateArgs} args - Arguments to create a UserFilter.
     * @example
     * // Create one UserFilter
     * const UserFilter = await prisma.userFilter.create({
     *   data: {
     *     // ... data to create a UserFilter
     *   }
     * })
     * 
     */
    create<T extends UserFilterCreateArgs>(args: SelectSubset<T, UserFilterCreateArgs<ExtArgs>>): Prisma__UserFilterClient<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserFilters.
     * @param {UserFilterCreateManyArgs} args - Arguments to create many UserFilters.
     * @example
     * // Create many UserFilters
     * const userFilter = await prisma.userFilter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserFilterCreateManyArgs>(args?: SelectSubset<T, UserFilterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserFilter.
     * @param {UserFilterDeleteArgs} args - Arguments to delete one UserFilter.
     * @example
     * // Delete one UserFilter
     * const UserFilter = await prisma.userFilter.delete({
     *   where: {
     *     // ... filter to delete one UserFilter
     *   }
     * })
     * 
     */
    delete<T extends UserFilterDeleteArgs>(args: SelectSubset<T, UserFilterDeleteArgs<ExtArgs>>): Prisma__UserFilterClient<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserFilter.
     * @param {UserFilterUpdateArgs} args - Arguments to update one UserFilter.
     * @example
     * // Update one UserFilter
     * const userFilter = await prisma.userFilter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserFilterUpdateArgs>(args: SelectSubset<T, UserFilterUpdateArgs<ExtArgs>>): Prisma__UserFilterClient<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserFilters.
     * @param {UserFilterDeleteManyArgs} args - Arguments to filter UserFilters to delete.
     * @example
     * // Delete a few UserFilters
     * const { count } = await prisma.userFilter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserFilterDeleteManyArgs>(args?: SelectSubset<T, UserFilterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFilters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFilterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFilters
     * const userFilter = await prisma.userFilter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserFilterUpdateManyArgs>(args: SelectSubset<T, UserFilterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserFilter.
     * @param {UserFilterUpsertArgs} args - Arguments to update or create a UserFilter.
     * @example
     * // Update or create a UserFilter
     * const userFilter = await prisma.userFilter.upsert({
     *   create: {
     *     // ... data to create a UserFilter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFilter we want to update
     *   }
     * })
     */
    upsert<T extends UserFilterUpsertArgs>(args: SelectSubset<T, UserFilterUpsertArgs<ExtArgs>>): Prisma__UserFilterClient<$Result.GetResult<Prisma.$UserFilterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserFilters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFilterCountArgs} args - Arguments to filter UserFilters to count.
     * @example
     * // Count the number of UserFilters
     * const count = await prisma.userFilter.count({
     *   where: {
     *     // ... the filter for the UserFilters we want to count
     *   }
     * })
    **/
    count<T extends UserFilterCountArgs>(
      args?: Subset<T, UserFilterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFilterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFilter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFilterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFilterAggregateArgs>(args: Subset<T, UserFilterAggregateArgs>): Prisma.PrismaPromise<GetUserFilterAggregateType<T>>

    /**
     * Group by UserFilter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFilterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFilterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFilterGroupByArgs['orderBy'] }
        : { orderBy?: UserFilterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFilterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFilterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserFilter model
   */
  readonly fields: UserFilterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFilter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserFilterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserFilter model
   */
  interface UserFilterFieldRefs {
    readonly id: FieldRef<"UserFilter", 'String'>
    readonly userId: FieldRef<"UserFilter", 'String'>
    readonly filterName: FieldRef<"UserFilter", 'String'>
    readonly filterValue: FieldRef<"UserFilter", 'String'>
    readonly isActive: FieldRef<"UserFilter", 'Boolean'>
    readonly createdAt: FieldRef<"UserFilter", 'DateTime'>
    readonly updatedAt: FieldRef<"UserFilter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserFilter findUnique
   */
  export type UserFilterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    /**
     * Filter, which UserFilter to fetch.
     */
    where: UserFilterWhereUniqueInput
  }

  /**
   * UserFilter findUniqueOrThrow
   */
  export type UserFilterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    /**
     * Filter, which UserFilter to fetch.
     */
    where: UserFilterWhereUniqueInput
  }

  /**
   * UserFilter findFirst
   */
  export type UserFilterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    /**
     * Filter, which UserFilter to fetch.
     */
    where?: UserFilterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFilters to fetch.
     */
    orderBy?: UserFilterOrderByWithRelationInput | UserFilterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFilters.
     */
    cursor?: UserFilterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFilters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFilters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFilters.
     */
    distinct?: UserFilterScalarFieldEnum | UserFilterScalarFieldEnum[]
  }

  /**
   * UserFilter findFirstOrThrow
   */
  export type UserFilterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    /**
     * Filter, which UserFilter to fetch.
     */
    where?: UserFilterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFilters to fetch.
     */
    orderBy?: UserFilterOrderByWithRelationInput | UserFilterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFilters.
     */
    cursor?: UserFilterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFilters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFilters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFilters.
     */
    distinct?: UserFilterScalarFieldEnum | UserFilterScalarFieldEnum[]
  }

  /**
   * UserFilter findMany
   */
  export type UserFilterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    /**
     * Filter, which UserFilters to fetch.
     */
    where?: UserFilterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFilters to fetch.
     */
    orderBy?: UserFilterOrderByWithRelationInput | UserFilterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFilters.
     */
    cursor?: UserFilterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFilters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFilters.
     */
    skip?: number
    distinct?: UserFilterScalarFieldEnum | UserFilterScalarFieldEnum[]
  }

  /**
   * UserFilter create
   */
  export type UserFilterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    /**
     * The data needed to create a UserFilter.
     */
    data: XOR<UserFilterCreateInput, UserFilterUncheckedCreateInput>
  }

  /**
   * UserFilter createMany
   */
  export type UserFilterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserFilters.
     */
    data: UserFilterCreateManyInput | UserFilterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserFilter update
   */
  export type UserFilterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    /**
     * The data needed to update a UserFilter.
     */
    data: XOR<UserFilterUpdateInput, UserFilterUncheckedUpdateInput>
    /**
     * Choose, which UserFilter to update.
     */
    where: UserFilterWhereUniqueInput
  }

  /**
   * UserFilter updateMany
   */
  export type UserFilterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserFilters.
     */
    data: XOR<UserFilterUpdateManyMutationInput, UserFilterUncheckedUpdateManyInput>
    /**
     * Filter which UserFilters to update
     */
    where?: UserFilterWhereInput
    /**
     * Limit how many UserFilters to update.
     */
    limit?: number
  }

  /**
   * UserFilter upsert
   */
  export type UserFilterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    /**
     * The filter to search for the UserFilter to update in case it exists.
     */
    where: UserFilterWhereUniqueInput
    /**
     * In case the UserFilter found by the `where` argument doesn't exist, create a new UserFilter with this data.
     */
    create: XOR<UserFilterCreateInput, UserFilterUncheckedCreateInput>
    /**
     * In case the UserFilter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserFilterUpdateInput, UserFilterUncheckedUpdateInput>
  }

  /**
   * UserFilter delete
   */
  export type UserFilterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
    /**
     * Filter which UserFilter to delete.
     */
    where: UserFilterWhereUniqueInput
  }

  /**
   * UserFilter deleteMany
   */
  export type UserFilterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFilters to delete
     */
    where?: UserFilterWhereInput
    /**
     * Limit how many UserFilters to delete.
     */
    limit?: number
  }

  /**
   * UserFilter without action
   */
  export type UserFilterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFilter
     */
    select?: UserFilterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFilter
     */
    omit?: UserFilterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFilterInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    phone: 'phone',
    user_password: 'user_password',
    position: 'position',
    departmentId: 'departmentId',
    role: 'role',
    lastlogin: 'lastlogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    permissionId: 'permissionId'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    directorId: 'directorId',
    description: 'description'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    dateRequest: 'dateRequest',
    nameDeal: 'nameDeal',
    nameObject: 'nameObject',
    direction: 'direction',
    deliveryType: 'deliveryType',
    contact: 'contact',
    phone: 'phone',
    email: 'email',
    amountCP: 'amountCP',
    amountPurchase: 'amountPurchase',
    amountWork: 'amountWork',
    delta: 'delta',
    comments: 'comments',
    dealStatus: 'dealStatus',
    plannedDateConnection: 'plannedDateConnection',
    resource: 'resource',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const RetailScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    dateRequest: 'dateRequest',
    nameDeal: 'nameDeal',
    nameObject: 'nameObject',
    direction: 'direction',
    deliveryType: 'deliveryType',
    contact: 'contact',
    phone: 'phone',
    email: 'email',
    amountCP: 'amountCP',
    delta: 'delta',
    dealStatus: 'dealStatus',
    comments: 'comments',
    plannedDateConnection: 'plannedDateConnection',
    resource: 'resource',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RetailScalarFieldEnum = (typeof RetailScalarFieldEnum)[keyof typeof RetailScalarFieldEnum]


  export const AdditionalContactScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    position: 'position'
  };

  export type AdditionalContactScalarFieldEnum = (typeof AdditionalContactScalarFieldEnum)[keyof typeof AdditionalContactScalarFieldEnum]


  export const UserLoginScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    loginAt: 'loginAt'
  };

  export type UserLoginScalarFieldEnum = (typeof UserLoginScalarFieldEnum)[keyof typeof UserLoginScalarFieldEnum]


  export const DealFileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    localPath: 'localPath',
    storageType: 'storageType',
    userId: 'userId',
    dealId: 'dealId',
    dealType: 'dealType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DealFileScalarFieldEnum = (typeof DealFileScalarFieldEnum)[keyof typeof DealFileScalarFieldEnum]


  export const UserFilterScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    filterName: 'filterName',
    filterValue: 'filterValue',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserFilterScalarFieldEnum = (typeof UserFilterScalarFieldEnum)[keyof typeof UserFilterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    phone: 'phone',
    user_password: 'user_password',
    position: 'position'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const UserPermissionOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    permissionId: 'permissionId'
  };

  export type UserPermissionOrderByRelevanceFieldEnum = (typeof UserPermissionOrderByRelevanceFieldEnum)[keyof typeof UserPermissionOrderByRelevanceFieldEnum]


  export const PermissionOrderByRelevanceFieldEnum: {
    id: 'id',
    description: 'description'
  };

  export type PermissionOrderByRelevanceFieldEnum = (typeof PermissionOrderByRelevanceFieldEnum)[keyof typeof PermissionOrderByRelevanceFieldEnum]


  export const DepartmentOrderByRelevanceFieldEnum: {
    directorId: 'directorId',
    description: 'description'
  };

  export type DepartmentOrderByRelevanceFieldEnum = (typeof DepartmentOrderByRelevanceFieldEnum)[keyof typeof DepartmentOrderByRelevanceFieldEnum]


  export const ProjectOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    nameDeal: 'nameDeal',
    nameObject: 'nameObject',
    contact: 'contact',
    phone: 'phone',
    email: 'email',
    comments: 'comments',
    resource: 'resource'
  };

  export type ProjectOrderByRelevanceFieldEnum = (typeof ProjectOrderByRelevanceFieldEnum)[keyof typeof ProjectOrderByRelevanceFieldEnum]


  export const RetailOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    nameDeal: 'nameDeal',
    nameObject: 'nameObject',
    contact: 'contact',
    phone: 'phone',
    email: 'email',
    comments: 'comments',
    resource: 'resource'
  };

  export type RetailOrderByRelevanceFieldEnum = (typeof RetailOrderByRelevanceFieldEnum)[keyof typeof RetailOrderByRelevanceFieldEnum]


  export const AdditionalContactOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    position: 'position'
  };

  export type AdditionalContactOrderByRelevanceFieldEnum = (typeof AdditionalContactOrderByRelevanceFieldEnum)[keyof typeof AdditionalContactOrderByRelevanceFieldEnum]


  export const UserLoginOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type UserLoginOrderByRelevanceFieldEnum = (typeof UserLoginOrderByRelevanceFieldEnum)[keyof typeof UserLoginOrderByRelevanceFieldEnum]


  export const DealFileOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    localPath: 'localPath',
    userId: 'userId',
    dealId: 'dealId'
  };

  export type DealFileOrderByRelevanceFieldEnum = (typeof DealFileOrderByRelevanceFieldEnum)[keyof typeof DealFileOrderByRelevanceFieldEnum]


  export const UserFilterOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    filterName: 'filterName',
    filterValue: 'filterValue'
  };

  export type UserFilterOrderByRelevanceFieldEnum = (typeof UserFilterOrderByRelevanceFieldEnum)[keyof typeof UserFilterOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'PermissionEnum'
   */
  export type EnumPermissionEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PermissionEnum'>
    


  /**
   * Reference to a field of type 'DepartmentEnum'
   */
  export type EnumDepartmentEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DepartmentEnum'>
    


  /**
   * Reference to a field of type 'DealType'
   */
  export type EnumDealTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DealType'>
    


  /**
   * Reference to a field of type 'DirectionProject'
   */
  export type EnumDirectionProjectFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DirectionProject'>
    


  /**
   * Reference to a field of type 'DeliveryProject'
   */
  export type EnumDeliveryProjectFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeliveryProject'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'StatusProject'
   */
  export type EnumStatusProjectFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusProject'>
    


  /**
   * Reference to a field of type 'DirectionRetail'
   */
  export type EnumDirectionRetailFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DirectionRetail'>
    


  /**
   * Reference to a field of type 'DeliveryRetail'
   */
  export type EnumDeliveryRetailFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeliveryRetail'>
    


  /**
   * Reference to a field of type 'StatusRetail'
   */
  export type EnumStatusRetailFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusRetail'>
    


  /**
   * Reference to a field of type 'StorageType'
   */
  export type EnumStorageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StorageType'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    user_password?: StringFilter<"User"> | string
    position?: StringFilter<"User"> | string
    departmentId?: IntFilter<"User"> | number
    role?: EnumRoleFilter<"User"> | $Enums.Role
    lastlogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    directorOf?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    File?: DealFileListRelationFilter
    projects?: ProjectListRelationFilter
    retail?: RetailListRelationFilter
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    login?: UserLoginListRelationFilter
    permissions?: UserPermissionListRelationFilter
    userFilters?: UserFilterListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    user_password?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    lastlogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    directorOf?: DepartmentOrderByWithRelationInput
    File?: DealFileOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
    retail?: RetailOrderByRelationAggregateInput
    department?: DepartmentOrderByWithRelationInput
    login?: UserLoginOrderByRelationAggregateInput
    permissions?: UserPermissionOrderByRelationAggregateInput
    userFilters?: UserFilterOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    user_password?: StringFilter<"User"> | string
    position?: StringFilter<"User"> | string
    departmentId?: IntFilter<"User"> | number
    role?: EnumRoleFilter<"User"> | $Enums.Role
    lastlogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    directorOf?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    File?: DealFileListRelationFilter
    projects?: ProjectListRelationFilter
    retail?: RetailListRelationFilter
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    login?: UserLoginListRelationFilter
    permissions?: UserPermissionListRelationFilter
    userFilters?: UserFilterListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    user_password?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    lastlogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    user_password?: StringWithAggregatesFilter<"User"> | string
    position?: StringWithAggregatesFilter<"User"> | string
    departmentId?: IntWithAggregatesFilter<"User"> | number
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    lastlogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    id?: StringFilter<"UserPermission"> | string
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }

  export type UserPermissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    user?: UserOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
    _relevance?: UserPermissionOrderByRelevanceInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }, "id">

  export type UserPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPermission"> | string
    userId?: StringWithAggregatesFilter<"UserPermission"> | string
    permissionId?: StringWithAggregatesFilter<"UserPermission"> | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: EnumPermissionEnumFilter<"Permission"> | $Enums.PermissionEnum
    description?: StringNullableFilter<"Permission"> | string | null
    userPermissions?: UserPermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userPermissions?: UserPermissionOrderByRelationAggregateInput
    _relevance?: PermissionOrderByRelevanceInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: $Enums.PermissionEnum
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    description?: StringNullableFilter<"Permission"> | string | null
    userPermissions?: UserPermissionListRelationFilter
  }, "id" | "name">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    name?: EnumPermissionEnumWithAggregatesFilter<"Permission"> | $Enums.PermissionEnum
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: IntFilter<"Department"> | number
    name?: EnumDepartmentEnumFilter<"Department"> | $Enums.DepartmentEnum
    directorId?: StringNullableFilter<"Department"> | string | null
    description?: StringFilter<"Department"> | string
    director?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    directorId?: SortOrderInput | SortOrder
    description?: SortOrder
    director?: UserOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    _relevance?: DepartmentOrderByRelevanceInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: $Enums.DepartmentEnum
    directorId?: string
    description?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    director?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
  }, "id" | "name" | "directorId" | "description">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    directorId?: SortOrderInput | SortOrder
    description?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Department"> | number
    name?: EnumDepartmentEnumWithAggregatesFilter<"Department"> | $Enums.DepartmentEnum
    directorId?: StringNullableWithAggregatesFilter<"Department"> | string | null
    description?: StringWithAggregatesFilter<"Department"> | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    userId?: StringFilter<"Project"> | string
    type?: EnumDealTypeFilter<"Project"> | $Enums.DealType
    dateRequest?: DateTimeFilter<"Project"> | Date | string
    nameDeal?: StringFilter<"Project"> | string
    nameObject?: StringFilter<"Project"> | string
    direction?: EnumDirectionProjectFilter<"Project"> | $Enums.DirectionProject
    deliveryType?: EnumDeliveryProjectNullableFilter<"Project"> | $Enums.DeliveryProject | null
    contact?: StringFilter<"Project"> | string
    phone?: StringNullableFilter<"Project"> | string | null
    email?: StringNullableFilter<"Project"> | string | null
    amountCP?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    amountWork?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    delta?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    comments?: StringFilter<"Project"> | string
    dealStatus?: EnumStatusProjectFilter<"Project"> | $Enums.StatusProject
    plannedDateConnection?: DateTimeNullableFilter<"Project"> | Date | string | null
    resource?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    additionalContacts?: AdditionalContactListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrderInput | SortOrder
    contact?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    amountCP?: SortOrderInput | SortOrder
    amountPurchase?: SortOrderInput | SortOrder
    amountWork?: SortOrderInput | SortOrder
    delta?: SortOrderInput | SortOrder
    comments?: SortOrder
    dealStatus?: SortOrder
    plannedDateConnection?: SortOrderInput | SortOrder
    resource?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    additionalContacts?: AdditionalContactOrderByRelationAggregateInput
    _relevance?: ProjectOrderByRelevanceInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    userId?: StringFilter<"Project"> | string
    type?: EnumDealTypeFilter<"Project"> | $Enums.DealType
    dateRequest?: DateTimeFilter<"Project"> | Date | string
    nameDeal?: StringFilter<"Project"> | string
    nameObject?: StringFilter<"Project"> | string
    direction?: EnumDirectionProjectFilter<"Project"> | $Enums.DirectionProject
    deliveryType?: EnumDeliveryProjectNullableFilter<"Project"> | $Enums.DeliveryProject | null
    contact?: StringFilter<"Project"> | string
    phone?: StringNullableFilter<"Project"> | string | null
    email?: StringNullableFilter<"Project"> | string | null
    amountCP?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    amountWork?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    delta?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    comments?: StringFilter<"Project"> | string
    dealStatus?: EnumStatusProjectFilter<"Project"> | $Enums.StatusProject
    plannedDateConnection?: DateTimeNullableFilter<"Project"> | Date | string | null
    resource?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    additionalContacts?: AdditionalContactListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrderInput | SortOrder
    contact?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    amountCP?: SortOrderInput | SortOrder
    amountPurchase?: SortOrderInput | SortOrder
    amountWork?: SortOrderInput | SortOrder
    delta?: SortOrderInput | SortOrder
    comments?: SortOrder
    dealStatus?: SortOrder
    plannedDateConnection?: SortOrderInput | SortOrder
    resource?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    userId?: StringWithAggregatesFilter<"Project"> | string
    type?: EnumDealTypeWithAggregatesFilter<"Project"> | $Enums.DealType
    dateRequest?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    nameDeal?: StringWithAggregatesFilter<"Project"> | string
    nameObject?: StringWithAggregatesFilter<"Project"> | string
    direction?: EnumDirectionProjectWithAggregatesFilter<"Project"> | $Enums.DirectionProject
    deliveryType?: EnumDeliveryProjectNullableWithAggregatesFilter<"Project"> | $Enums.DeliveryProject | null
    contact?: StringWithAggregatesFilter<"Project"> | string
    phone?: StringNullableWithAggregatesFilter<"Project"> | string | null
    email?: StringNullableWithAggregatesFilter<"Project"> | string | null
    amountCP?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    amountWork?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    delta?: DecimalNullableWithAggregatesFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    comments?: StringWithAggregatesFilter<"Project"> | string
    dealStatus?: EnumStatusProjectWithAggregatesFilter<"Project"> | $Enums.StatusProject
    plannedDateConnection?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    resource?: StringNullableWithAggregatesFilter<"Project"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type RetailWhereInput = {
    AND?: RetailWhereInput | RetailWhereInput[]
    OR?: RetailWhereInput[]
    NOT?: RetailWhereInput | RetailWhereInput[]
    id?: StringFilter<"Retail"> | string
    userId?: StringFilter<"Retail"> | string
    type?: EnumDealTypeFilter<"Retail"> | $Enums.DealType
    dateRequest?: DateTimeFilter<"Retail"> | Date | string
    nameDeal?: StringFilter<"Retail"> | string
    nameObject?: StringFilter<"Retail"> | string
    direction?: EnumDirectionRetailFilter<"Retail"> | $Enums.DirectionRetail
    deliveryType?: EnumDeliveryRetailNullableFilter<"Retail"> | $Enums.DeliveryRetail | null
    contact?: StringFilter<"Retail"> | string
    phone?: StringNullableFilter<"Retail"> | string | null
    email?: StringNullableFilter<"Retail"> | string | null
    amountCP?: DecimalNullableFilter<"Retail"> | Decimal | DecimalJsLike | number | string | null
    delta?: DecimalNullableFilter<"Retail"> | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFilter<"Retail"> | $Enums.StatusRetail
    comments?: StringFilter<"Retail"> | string
    plannedDateConnection?: DateTimeNullableFilter<"Retail"> | Date | string | null
    resource?: StringNullableFilter<"Retail"> | string | null
    createdAt?: DateTimeFilter<"Retail"> | Date | string
    updatedAt?: DateTimeFilter<"Retail"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    additionalContacts?: AdditionalContactListRelationFilter
  }

  export type RetailOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrderInput | SortOrder
    contact?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    amountCP?: SortOrderInput | SortOrder
    delta?: SortOrderInput | SortOrder
    dealStatus?: SortOrder
    comments?: SortOrder
    plannedDateConnection?: SortOrderInput | SortOrder
    resource?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    additionalContacts?: AdditionalContactOrderByRelationAggregateInput
    _relevance?: RetailOrderByRelevanceInput
  }

  export type RetailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RetailWhereInput | RetailWhereInput[]
    OR?: RetailWhereInput[]
    NOT?: RetailWhereInput | RetailWhereInput[]
    userId?: StringFilter<"Retail"> | string
    type?: EnumDealTypeFilter<"Retail"> | $Enums.DealType
    dateRequest?: DateTimeFilter<"Retail"> | Date | string
    nameDeal?: StringFilter<"Retail"> | string
    nameObject?: StringFilter<"Retail"> | string
    direction?: EnumDirectionRetailFilter<"Retail"> | $Enums.DirectionRetail
    deliveryType?: EnumDeliveryRetailNullableFilter<"Retail"> | $Enums.DeliveryRetail | null
    contact?: StringFilter<"Retail"> | string
    phone?: StringNullableFilter<"Retail"> | string | null
    email?: StringNullableFilter<"Retail"> | string | null
    amountCP?: DecimalNullableFilter<"Retail"> | Decimal | DecimalJsLike | number | string | null
    delta?: DecimalNullableFilter<"Retail"> | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFilter<"Retail"> | $Enums.StatusRetail
    comments?: StringFilter<"Retail"> | string
    plannedDateConnection?: DateTimeNullableFilter<"Retail"> | Date | string | null
    resource?: StringNullableFilter<"Retail"> | string | null
    createdAt?: DateTimeFilter<"Retail"> | Date | string
    updatedAt?: DateTimeFilter<"Retail"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    additionalContacts?: AdditionalContactListRelationFilter
  }, "id">

  export type RetailOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrderInput | SortOrder
    contact?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    amountCP?: SortOrderInput | SortOrder
    delta?: SortOrderInput | SortOrder
    dealStatus?: SortOrder
    comments?: SortOrder
    plannedDateConnection?: SortOrderInput | SortOrder
    resource?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RetailCountOrderByAggregateInput
    _avg?: RetailAvgOrderByAggregateInput
    _max?: RetailMaxOrderByAggregateInput
    _min?: RetailMinOrderByAggregateInput
    _sum?: RetailSumOrderByAggregateInput
  }

  export type RetailScalarWhereWithAggregatesInput = {
    AND?: RetailScalarWhereWithAggregatesInput | RetailScalarWhereWithAggregatesInput[]
    OR?: RetailScalarWhereWithAggregatesInput[]
    NOT?: RetailScalarWhereWithAggregatesInput | RetailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Retail"> | string
    userId?: StringWithAggregatesFilter<"Retail"> | string
    type?: EnumDealTypeWithAggregatesFilter<"Retail"> | $Enums.DealType
    dateRequest?: DateTimeWithAggregatesFilter<"Retail"> | Date | string
    nameDeal?: StringWithAggregatesFilter<"Retail"> | string
    nameObject?: StringWithAggregatesFilter<"Retail"> | string
    direction?: EnumDirectionRetailWithAggregatesFilter<"Retail"> | $Enums.DirectionRetail
    deliveryType?: EnumDeliveryRetailNullableWithAggregatesFilter<"Retail"> | $Enums.DeliveryRetail | null
    contact?: StringWithAggregatesFilter<"Retail"> | string
    phone?: StringNullableWithAggregatesFilter<"Retail"> | string | null
    email?: StringNullableWithAggregatesFilter<"Retail"> | string | null
    amountCP?: DecimalNullableWithAggregatesFilter<"Retail"> | Decimal | DecimalJsLike | number | string | null
    delta?: DecimalNullableWithAggregatesFilter<"Retail"> | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailWithAggregatesFilter<"Retail"> | $Enums.StatusRetail
    comments?: StringWithAggregatesFilter<"Retail"> | string
    plannedDateConnection?: DateTimeNullableWithAggregatesFilter<"Retail"> | Date | string | null
    resource?: StringNullableWithAggregatesFilter<"Retail"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Retail"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Retail"> | Date | string
  }

  export type AdditionalContactWhereInput = {
    AND?: AdditionalContactWhereInput | AdditionalContactWhereInput[]
    OR?: AdditionalContactWhereInput[]
    NOT?: AdditionalContactWhereInput | AdditionalContactWhereInput[]
    id?: StringFilter<"AdditionalContact"> | string
    name?: StringFilter<"AdditionalContact"> | string
    phone?: StringNullableFilter<"AdditionalContact"> | string | null
    email?: StringNullableFilter<"AdditionalContact"> | string | null
    position?: StringNullableFilter<"AdditionalContact"> | string | null
    projects?: ProjectListRelationFilter
    retails?: RetailListRelationFilter
  }

  export type AdditionalContactOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    projects?: ProjectOrderByRelationAggregateInput
    retails?: RetailOrderByRelationAggregateInput
    _relevance?: AdditionalContactOrderByRelevanceInput
  }

  export type AdditionalContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdditionalContactWhereInput | AdditionalContactWhereInput[]
    OR?: AdditionalContactWhereInput[]
    NOT?: AdditionalContactWhereInput | AdditionalContactWhereInput[]
    name?: StringFilter<"AdditionalContact"> | string
    phone?: StringNullableFilter<"AdditionalContact"> | string | null
    email?: StringNullableFilter<"AdditionalContact"> | string | null
    position?: StringNullableFilter<"AdditionalContact"> | string | null
    projects?: ProjectListRelationFilter
    retails?: RetailListRelationFilter
  }, "id">

  export type AdditionalContactOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    _count?: AdditionalContactCountOrderByAggregateInput
    _max?: AdditionalContactMaxOrderByAggregateInput
    _min?: AdditionalContactMinOrderByAggregateInput
  }

  export type AdditionalContactScalarWhereWithAggregatesInput = {
    AND?: AdditionalContactScalarWhereWithAggregatesInput | AdditionalContactScalarWhereWithAggregatesInput[]
    OR?: AdditionalContactScalarWhereWithAggregatesInput[]
    NOT?: AdditionalContactScalarWhereWithAggregatesInput | AdditionalContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdditionalContact"> | string
    name?: StringWithAggregatesFilter<"AdditionalContact"> | string
    phone?: StringNullableWithAggregatesFilter<"AdditionalContact"> | string | null
    email?: StringNullableWithAggregatesFilter<"AdditionalContact"> | string | null
    position?: StringNullableWithAggregatesFilter<"AdditionalContact"> | string | null
  }

  export type UserLoginWhereInput = {
    AND?: UserLoginWhereInput | UserLoginWhereInput[]
    OR?: UserLoginWhereInput[]
    NOT?: UserLoginWhereInput | UserLoginWhereInput[]
    id?: StringFilter<"UserLogin"> | string
    userId?: StringFilter<"UserLogin"> | string
    loginAt?: DateTimeFilter<"UserLogin"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserLoginOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    loginAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: UserLoginOrderByRelevanceInput
  }

  export type UserLoginWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserLoginWhereInput | UserLoginWhereInput[]
    OR?: UserLoginWhereInput[]
    NOT?: UserLoginWhereInput | UserLoginWhereInput[]
    userId?: StringFilter<"UserLogin"> | string
    loginAt?: DateTimeFilter<"UserLogin"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserLoginOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    loginAt?: SortOrder
    _count?: UserLoginCountOrderByAggregateInput
    _max?: UserLoginMaxOrderByAggregateInput
    _min?: UserLoginMinOrderByAggregateInput
  }

  export type UserLoginScalarWhereWithAggregatesInput = {
    AND?: UserLoginScalarWhereWithAggregatesInput | UserLoginScalarWhereWithAggregatesInput[]
    OR?: UserLoginScalarWhereWithAggregatesInput[]
    NOT?: UserLoginScalarWhereWithAggregatesInput | UserLoginScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserLogin"> | string
    userId?: StringWithAggregatesFilter<"UserLogin"> | string
    loginAt?: DateTimeWithAggregatesFilter<"UserLogin"> | Date | string
  }

  export type DealFileWhereInput = {
    AND?: DealFileWhereInput | DealFileWhereInput[]
    OR?: DealFileWhereInput[]
    NOT?: DealFileWhereInput | DealFileWhereInput[]
    id?: StringFilter<"DealFile"> | string
    name?: StringFilter<"DealFile"> | string
    localPath?: StringFilter<"DealFile"> | string
    storageType?: EnumStorageTypeFilter<"DealFile"> | $Enums.StorageType
    userId?: StringFilter<"DealFile"> | string
    dealId?: StringFilter<"DealFile"> | string
    dealType?: EnumDealTypeFilter<"DealFile"> | $Enums.DealType
    createdAt?: DateTimeFilter<"DealFile"> | Date | string
    updatedAt?: DateTimeFilter<"DealFile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DealFileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    localPath?: SortOrder
    storageType?: SortOrder
    userId?: SortOrder
    dealId?: SortOrder
    dealType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: DealFileOrderByRelevanceInput
  }

  export type DealFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DealFileWhereInput | DealFileWhereInput[]
    OR?: DealFileWhereInput[]
    NOT?: DealFileWhereInput | DealFileWhereInput[]
    name?: StringFilter<"DealFile"> | string
    localPath?: StringFilter<"DealFile"> | string
    storageType?: EnumStorageTypeFilter<"DealFile"> | $Enums.StorageType
    userId?: StringFilter<"DealFile"> | string
    dealId?: StringFilter<"DealFile"> | string
    dealType?: EnumDealTypeFilter<"DealFile"> | $Enums.DealType
    createdAt?: DateTimeFilter<"DealFile"> | Date | string
    updatedAt?: DateTimeFilter<"DealFile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DealFileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    localPath?: SortOrder
    storageType?: SortOrder
    userId?: SortOrder
    dealId?: SortOrder
    dealType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DealFileCountOrderByAggregateInput
    _max?: DealFileMaxOrderByAggregateInput
    _min?: DealFileMinOrderByAggregateInput
  }

  export type DealFileScalarWhereWithAggregatesInput = {
    AND?: DealFileScalarWhereWithAggregatesInput | DealFileScalarWhereWithAggregatesInput[]
    OR?: DealFileScalarWhereWithAggregatesInput[]
    NOT?: DealFileScalarWhereWithAggregatesInput | DealFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DealFile"> | string
    name?: StringWithAggregatesFilter<"DealFile"> | string
    localPath?: StringWithAggregatesFilter<"DealFile"> | string
    storageType?: EnumStorageTypeWithAggregatesFilter<"DealFile"> | $Enums.StorageType
    userId?: StringWithAggregatesFilter<"DealFile"> | string
    dealId?: StringWithAggregatesFilter<"DealFile"> | string
    dealType?: EnumDealTypeWithAggregatesFilter<"DealFile"> | $Enums.DealType
    createdAt?: DateTimeWithAggregatesFilter<"DealFile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DealFile"> | Date | string
  }

  export type UserFilterWhereInput = {
    AND?: UserFilterWhereInput | UserFilterWhereInput[]
    OR?: UserFilterWhereInput[]
    NOT?: UserFilterWhereInput | UserFilterWhereInput[]
    id?: StringFilter<"UserFilter"> | string
    userId?: StringFilter<"UserFilter"> | string
    filterName?: StringFilter<"UserFilter"> | string
    filterValue?: StringFilter<"UserFilter"> | string
    isActive?: BoolFilter<"UserFilter"> | boolean
    createdAt?: DateTimeFilter<"UserFilter"> | Date | string
    updatedAt?: DateTimeFilter<"UserFilter"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserFilterOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    filterName?: SortOrder
    filterValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: UserFilterOrderByRelevanceInput
  }

  export type UserFilterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserFilterWhereInput | UserFilterWhereInput[]
    OR?: UserFilterWhereInput[]
    NOT?: UserFilterWhereInput | UserFilterWhereInput[]
    userId?: StringFilter<"UserFilter"> | string
    filterName?: StringFilter<"UserFilter"> | string
    filterValue?: StringFilter<"UserFilter"> | string
    isActive?: BoolFilter<"UserFilter"> | boolean
    createdAt?: DateTimeFilter<"UserFilter"> | Date | string
    updatedAt?: DateTimeFilter<"UserFilter"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserFilterOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    filterName?: SortOrder
    filterValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserFilterCountOrderByAggregateInput
    _max?: UserFilterMaxOrderByAggregateInput
    _min?: UserFilterMinOrderByAggregateInput
  }

  export type UserFilterScalarWhereWithAggregatesInput = {
    AND?: UserFilterScalarWhereWithAggregatesInput | UserFilterScalarWhereWithAggregatesInput[]
    OR?: UserFilterScalarWhereWithAggregatesInput[]
    NOT?: UserFilterScalarWhereWithAggregatesInput | UserFilterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserFilter"> | string
    userId?: StringWithAggregatesFilter<"UserFilter"> | string
    filterName?: StringWithAggregatesFilter<"UserFilter"> | string
    filterValue?: StringWithAggregatesFilter<"UserFilter"> | string
    isActive?: BoolWithAggregatesFilter<"UserFilter"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserFilter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserFilter"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    File?: DealFileCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    retail?: RetailCreateNestedManyWithoutUserInput
    department: DepartmentCreateNestedOneWithoutUsersInput
    login?: UserLoginCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    userFilters?: UserFilterCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    File?: DealFileUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    retail?: RetailUncheckedCreateNestedManyWithoutUserInput
    login?: UserLoginUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    userFilters?: UserFilterUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    File?: DealFileUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    retail?: RetailUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
    login?: UserLoginUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    File?: DealFileUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    retail?: RetailUncheckedUpdateManyWithoutUserNestedInput
    login?: UserLoginUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutUserPermissionsInput
  }

  export type UserPermissionUncheckedCreateInput = {
    id?: string
    userId: string
    permissionId: string
  }

  export type UserPermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type UserPermissionCreateManyInput = {
    id?: string
    userId: string
    permissionId: string
  }

  export type UserPermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type UserPermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionCreateInput = {
    id?: string
    name: $Enums.PermissionEnum
    description?: string | null
    userPermissions?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    name: $Enums.PermissionEnum
    description?: string | null
    userPermissions?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumPermissionEnumFieldUpdateOperationsInput | $Enums.PermissionEnum
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userPermissions?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumPermissionEnumFieldUpdateOperationsInput | $Enums.PermissionEnum
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userPermissions?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    name: $Enums.PermissionEnum
    description?: string | null
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumPermissionEnumFieldUpdateOperationsInput | $Enums.PermissionEnum
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumPermissionEnumFieldUpdateOperationsInput | $Enums.PermissionEnum
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentCreateInput = {
    name: $Enums.DepartmentEnum
    description: string
    director?: UserCreateNestedOneWithoutDirectorOfInput
    users?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    name: $Enums.DepartmentEnum
    directorId?: string | null
    description: string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    name?: EnumDepartmentEnumFieldUpdateOperationsInput | $Enums.DepartmentEnum
    description?: StringFieldUpdateOperationsInput | string
    director?: UserUpdateOneWithoutDirectorOfNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumDepartmentEnumFieldUpdateOperationsInput | $Enums.DepartmentEnum
    directorId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: number
    name: $Enums.DepartmentEnum
    directorId?: string | null
    description: string
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: EnumDepartmentEnumFieldUpdateOperationsInput | $Enums.DepartmentEnum
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumDepartmentEnumFieldUpdateOperationsInput | $Enums.DepartmentEnum
    directorId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionProject
    deliveryType?: $Enums.DeliveryProject | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    amountPurchase?: Decimal | DecimalJsLike | number | string | null
    amountWork?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    comments: string
    dealStatus: $Enums.StatusProject
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProjectsInput
    additionalContacts?: AdditionalContactCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    userId: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionProject
    deliveryType?: $Enums.DeliveryProject | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    amountPurchase?: Decimal | DecimalJsLike | number | string | null
    amountWork?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    comments: string
    dealStatus: $Enums.StatusProject
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    additionalContacts?: AdditionalContactUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    additionalContacts?: AdditionalContactUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalContacts?: AdditionalContactUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    userId: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionProject
    deliveryType?: $Enums.DeliveryProject | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    amountPurchase?: Decimal | DecimalJsLike | number | string | null
    amountWork?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    comments: string
    dealStatus: $Enums.StatusProject
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetailCreateInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionRetail
    deliveryType?: $Enums.DeliveryRetail | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    dealStatus: $Enums.StatusRetail
    comments: string
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRetailInput
    additionalContacts?: AdditionalContactCreateNestedManyWithoutRetailsInput
  }

  export type RetailUncheckedCreateInput = {
    id?: string
    userId: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionRetail
    deliveryType?: $Enums.DeliveryRetail | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    dealStatus: $Enums.StatusRetail
    comments: string
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    additionalContacts?: AdditionalContactUncheckedCreateNestedManyWithoutRetailsInput
  }

  export type RetailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRetailNestedInput
    additionalContacts?: AdditionalContactUpdateManyWithoutRetailsNestedInput
  }

  export type RetailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalContacts?: AdditionalContactUncheckedUpdateManyWithoutRetailsNestedInput
  }

  export type RetailCreateManyInput = {
    id?: string
    userId: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionRetail
    deliveryType?: $Enums.DeliveryRetail | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    dealStatus: $Enums.StatusRetail
    comments: string
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RetailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdditionalContactCreateInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    position?: string | null
    projects?: ProjectCreateNestedManyWithoutAdditionalContactsInput
    retails?: RetailCreateNestedManyWithoutAdditionalContactsInput
  }

  export type AdditionalContactUncheckedCreateInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    position?: string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutAdditionalContactsInput
    retails?: RetailUncheckedCreateNestedManyWithoutAdditionalContactsInput
  }

  export type AdditionalContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUpdateManyWithoutAdditionalContactsNestedInput
    retails?: RetailUpdateManyWithoutAdditionalContactsNestedInput
  }

  export type AdditionalContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUncheckedUpdateManyWithoutAdditionalContactsNestedInput
    retails?: RetailUncheckedUpdateManyWithoutAdditionalContactsNestedInput
  }

  export type AdditionalContactCreateManyInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    position?: string | null
  }

  export type AdditionalContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdditionalContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserLoginCreateInput = {
    id?: string
    loginAt?: Date | string
    user: UserCreateNestedOneWithoutLoginInput
  }

  export type UserLoginUncheckedCreateInput = {
    id?: string
    userId: string
    loginAt?: Date | string
  }

  export type UserLoginUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLoginNestedInput
  }

  export type UserLoginUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    loginAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLoginCreateManyInput = {
    id?: string
    userId: string
    loginAt?: Date | string
  }

  export type UserLoginUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLoginUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    loginAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealFileCreateInput = {
    id?: string
    name: string
    localPath: string
    storageType?: $Enums.StorageType
    dealId: string
    dealType: $Enums.DealType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFileInput
  }

  export type DealFileUncheckedCreateInput = {
    id?: string
    name: string
    localPath: string
    storageType?: $Enums.StorageType
    userId: string
    dealId: string
    dealType: $Enums.DealType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DealFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    storageType?: EnumStorageTypeFieldUpdateOperationsInput | $Enums.StorageType
    dealId?: StringFieldUpdateOperationsInput | string
    dealType?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFileNestedInput
  }

  export type DealFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    storageType?: EnumStorageTypeFieldUpdateOperationsInput | $Enums.StorageType
    userId?: StringFieldUpdateOperationsInput | string
    dealId?: StringFieldUpdateOperationsInput | string
    dealType?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealFileCreateManyInput = {
    id?: string
    name: string
    localPath: string
    storageType?: $Enums.StorageType
    userId: string
    dealId: string
    dealType: $Enums.DealType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DealFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    storageType?: EnumStorageTypeFieldUpdateOperationsInput | $Enums.StorageType
    dealId?: StringFieldUpdateOperationsInput | string
    dealType?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    storageType?: EnumStorageTypeFieldUpdateOperationsInput | $Enums.StorageType
    userId?: StringFieldUpdateOperationsInput | string
    dealId?: StringFieldUpdateOperationsInput | string
    dealType?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFilterCreateInput = {
    id?: string
    filterName: string
    filterValue: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserFiltersInput
  }

  export type UserFilterUncheckedCreateInput = {
    id?: string
    userId: string
    filterName: string
    filterValue: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserFilterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filterName?: StringFieldUpdateOperationsInput | string
    filterValue?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserFiltersNestedInput
  }

  export type UserFilterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    filterName?: StringFieldUpdateOperationsInput | string
    filterValue?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFilterCreateManyInput = {
    id?: string
    userId: string
    filterName: string
    filterValue: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserFilterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filterName?: StringFieldUpdateOperationsInput | string
    filterValue?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFilterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    filterName?: StringFieldUpdateOperationsInput | string
    filterValue?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type DealFileListRelationFilter = {
    every?: DealFileWhereInput
    some?: DealFileWhereInput
    none?: DealFileWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type RetailListRelationFilter = {
    every?: RetailWhereInput
    some?: RetailWhereInput
    none?: RetailWhereInput
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type UserLoginListRelationFilter = {
    every?: UserLoginWhereInput
    some?: UserLoginWhereInput
    none?: UserLoginWhereInput
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type UserFilterListRelationFilter = {
    every?: UserFilterWhereInput
    some?: UserFilterWhereInput
    none?: UserFilterWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DealFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLoginOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserFilterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    user_password?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    lastlogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    departmentId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    user_password?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    lastlogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    user_password?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    lastlogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    departmentId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PermissionScalarRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type UserPermissionOrderByRelevanceInput = {
    fields: UserPermissionOrderByRelevanceFieldEnum | UserPermissionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
  }

  export type EnumPermissionEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionEnum | EnumPermissionEnumFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionEnum[]
    notIn?: $Enums.PermissionEnum[]
    not?: NestedEnumPermissionEnumFilter<$PrismaModel> | $Enums.PermissionEnum
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PermissionOrderByRelevanceInput = {
    fields: PermissionOrderByRelevanceFieldEnum | PermissionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type EnumPermissionEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionEnum | EnumPermissionEnumFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionEnum[]
    notIn?: $Enums.PermissionEnum[]
    not?: NestedEnumPermissionEnumWithAggregatesFilter<$PrismaModel> | $Enums.PermissionEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionEnumFilter<$PrismaModel>
    _max?: NestedEnumPermissionEnumFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumDepartmentEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentEnum | EnumDepartmentEnumFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentEnum[]
    notIn?: $Enums.DepartmentEnum[]
    not?: NestedEnumDepartmentEnumFilter<$PrismaModel> | $Enums.DepartmentEnum
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelevanceInput = {
    fields: DepartmentOrderByRelevanceFieldEnum | DepartmentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    directorId?: SortOrder
    description?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    directorId?: SortOrder
    description?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    directorId?: SortOrder
    description?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumDepartmentEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentEnum | EnumDepartmentEnumFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentEnum[]
    notIn?: $Enums.DepartmentEnum[]
    not?: NestedEnumDepartmentEnumWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentEnumFilter<$PrismaModel>
    _max?: NestedEnumDepartmentEnumFilter<$PrismaModel>
  }

  export type EnumDealTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DealType | EnumDealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DealType[]
    notIn?: $Enums.DealType[]
    not?: NestedEnumDealTypeFilter<$PrismaModel> | $Enums.DealType
  }

  export type EnumDirectionProjectFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionProject | EnumDirectionProjectFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionProject[]
    notIn?: $Enums.DirectionProject[]
    not?: NestedEnumDirectionProjectFilter<$PrismaModel> | $Enums.DirectionProject
  }

  export type EnumDeliveryProjectNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryProject | EnumDeliveryProjectFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeliveryProject[] | null
    notIn?: $Enums.DeliveryProject[] | null
    not?: NestedEnumDeliveryProjectNullableFilter<$PrismaModel> | $Enums.DeliveryProject | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumStatusProjectFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusProject | EnumStatusProjectFieldRefInput<$PrismaModel>
    in?: $Enums.StatusProject[]
    notIn?: $Enums.StatusProject[]
    not?: NestedEnumStatusProjectFilter<$PrismaModel> | $Enums.StatusProject
  }

  export type AdditionalContactListRelationFilter = {
    every?: AdditionalContactWhereInput
    some?: AdditionalContactWhereInput
    none?: AdditionalContactWhereInput
  }

  export type AdditionalContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelevanceInput = {
    fields: ProjectOrderByRelevanceFieldEnum | ProjectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrder
    contact?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    amountCP?: SortOrder
    amountPurchase?: SortOrder
    amountWork?: SortOrder
    delta?: SortOrder
    comments?: SortOrder
    dealStatus?: SortOrder
    plannedDateConnection?: SortOrder
    resource?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    amountCP?: SortOrder
    amountPurchase?: SortOrder
    amountWork?: SortOrder
    delta?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrder
    contact?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    amountCP?: SortOrder
    amountPurchase?: SortOrder
    amountWork?: SortOrder
    delta?: SortOrder
    comments?: SortOrder
    dealStatus?: SortOrder
    plannedDateConnection?: SortOrder
    resource?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrder
    contact?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    amountCP?: SortOrder
    amountPurchase?: SortOrder
    amountWork?: SortOrder
    delta?: SortOrder
    comments?: SortOrder
    dealStatus?: SortOrder
    plannedDateConnection?: SortOrder
    resource?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    amountCP?: SortOrder
    amountPurchase?: SortOrder
    amountWork?: SortOrder
    delta?: SortOrder
  }

  export type EnumDealTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DealType | EnumDealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DealType[]
    notIn?: $Enums.DealType[]
    not?: NestedEnumDealTypeWithAggregatesFilter<$PrismaModel> | $Enums.DealType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDealTypeFilter<$PrismaModel>
    _max?: NestedEnumDealTypeFilter<$PrismaModel>
  }

  export type EnumDirectionProjectWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionProject | EnumDirectionProjectFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionProject[]
    notIn?: $Enums.DirectionProject[]
    not?: NestedEnumDirectionProjectWithAggregatesFilter<$PrismaModel> | $Enums.DirectionProject
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDirectionProjectFilter<$PrismaModel>
    _max?: NestedEnumDirectionProjectFilter<$PrismaModel>
  }

  export type EnumDeliveryProjectNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryProject | EnumDeliveryProjectFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeliveryProject[] | null
    notIn?: $Enums.DeliveryProject[] | null
    not?: NestedEnumDeliveryProjectNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryProject | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeliveryProjectNullableFilter<$PrismaModel>
    _max?: NestedEnumDeliveryProjectNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumStatusProjectWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusProject | EnumStatusProjectFieldRefInput<$PrismaModel>
    in?: $Enums.StatusProject[]
    notIn?: $Enums.StatusProject[]
    not?: NestedEnumStatusProjectWithAggregatesFilter<$PrismaModel> | $Enums.StatusProject
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusProjectFilter<$PrismaModel>
    _max?: NestedEnumStatusProjectFilter<$PrismaModel>
  }

  export type EnumDirectionRetailFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionRetail | EnumDirectionRetailFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionRetail[]
    notIn?: $Enums.DirectionRetail[]
    not?: NestedEnumDirectionRetailFilter<$PrismaModel> | $Enums.DirectionRetail
  }

  export type EnumDeliveryRetailNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryRetail | EnumDeliveryRetailFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeliveryRetail[] | null
    notIn?: $Enums.DeliveryRetail[] | null
    not?: NestedEnumDeliveryRetailNullableFilter<$PrismaModel> | $Enums.DeliveryRetail | null
  }

  export type EnumStatusRetailFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusRetail | EnumStatusRetailFieldRefInput<$PrismaModel>
    in?: $Enums.StatusRetail[]
    notIn?: $Enums.StatusRetail[]
    not?: NestedEnumStatusRetailFilter<$PrismaModel> | $Enums.StatusRetail
  }

  export type RetailOrderByRelevanceInput = {
    fields: RetailOrderByRelevanceFieldEnum | RetailOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RetailCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrder
    contact?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    amountCP?: SortOrder
    delta?: SortOrder
    dealStatus?: SortOrder
    comments?: SortOrder
    plannedDateConnection?: SortOrder
    resource?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RetailAvgOrderByAggregateInput = {
    amountCP?: SortOrder
    delta?: SortOrder
  }

  export type RetailMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrder
    contact?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    amountCP?: SortOrder
    delta?: SortOrder
    dealStatus?: SortOrder
    comments?: SortOrder
    plannedDateConnection?: SortOrder
    resource?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RetailMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    dateRequest?: SortOrder
    nameDeal?: SortOrder
    nameObject?: SortOrder
    direction?: SortOrder
    deliveryType?: SortOrder
    contact?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    amountCP?: SortOrder
    delta?: SortOrder
    dealStatus?: SortOrder
    comments?: SortOrder
    plannedDateConnection?: SortOrder
    resource?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RetailSumOrderByAggregateInput = {
    amountCP?: SortOrder
    delta?: SortOrder
  }

  export type EnumDirectionRetailWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionRetail | EnumDirectionRetailFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionRetail[]
    notIn?: $Enums.DirectionRetail[]
    not?: NestedEnumDirectionRetailWithAggregatesFilter<$PrismaModel> | $Enums.DirectionRetail
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDirectionRetailFilter<$PrismaModel>
    _max?: NestedEnumDirectionRetailFilter<$PrismaModel>
  }

  export type EnumDeliveryRetailNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryRetail | EnumDeliveryRetailFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeliveryRetail[] | null
    notIn?: $Enums.DeliveryRetail[] | null
    not?: NestedEnumDeliveryRetailNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryRetail | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeliveryRetailNullableFilter<$PrismaModel>
    _max?: NestedEnumDeliveryRetailNullableFilter<$PrismaModel>
  }

  export type EnumStatusRetailWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusRetail | EnumStatusRetailFieldRefInput<$PrismaModel>
    in?: $Enums.StatusRetail[]
    notIn?: $Enums.StatusRetail[]
    not?: NestedEnumStatusRetailWithAggregatesFilter<$PrismaModel> | $Enums.StatusRetail
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusRetailFilter<$PrismaModel>
    _max?: NestedEnumStatusRetailFilter<$PrismaModel>
  }

  export type AdditionalContactOrderByRelevanceInput = {
    fields: AdditionalContactOrderByRelevanceFieldEnum | AdditionalContactOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AdditionalContactCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    position?: SortOrder
  }

  export type AdditionalContactMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    position?: SortOrder
  }

  export type AdditionalContactMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    position?: SortOrder
  }

  export type UserLoginOrderByRelevanceInput = {
    fields: UserLoginOrderByRelevanceFieldEnum | UserLoginOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserLoginCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    loginAt?: SortOrder
  }

  export type UserLoginMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    loginAt?: SortOrder
  }

  export type UserLoginMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    loginAt?: SortOrder
  }

  export type EnumStorageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageType | EnumStorageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StorageType[]
    notIn?: $Enums.StorageType[]
    not?: NestedEnumStorageTypeFilter<$PrismaModel> | $Enums.StorageType
  }

  export type DealFileOrderByRelevanceInput = {
    fields: DealFileOrderByRelevanceFieldEnum | DealFileOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DealFileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    localPath?: SortOrder
    storageType?: SortOrder
    userId?: SortOrder
    dealId?: SortOrder
    dealType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DealFileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    localPath?: SortOrder
    storageType?: SortOrder
    userId?: SortOrder
    dealId?: SortOrder
    dealType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DealFileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    localPath?: SortOrder
    storageType?: SortOrder
    userId?: SortOrder
    dealId?: SortOrder
    dealType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStorageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageType | EnumStorageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StorageType[]
    notIn?: $Enums.StorageType[]
    not?: NestedEnumStorageTypeWithAggregatesFilter<$PrismaModel> | $Enums.StorageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStorageTypeFilter<$PrismaModel>
    _max?: NestedEnumStorageTypeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserFilterOrderByRelevanceInput = {
    fields: UserFilterOrderByRelevanceFieldEnum | UserFilterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserFilterCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    filterName?: SortOrder
    filterValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserFilterMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    filterName?: SortOrder
    filterValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserFilterMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    filterName?: SortOrder
    filterValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DepartmentCreateNestedOneWithoutDirectorInput = {
    create?: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDirectorInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DealFileCreateNestedManyWithoutUserInput = {
    create?: XOR<DealFileCreateWithoutUserInput, DealFileUncheckedCreateWithoutUserInput> | DealFileCreateWithoutUserInput[] | DealFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DealFileCreateOrConnectWithoutUserInput | DealFileCreateOrConnectWithoutUserInput[]
    createMany?: DealFileCreateManyUserInputEnvelope
    connect?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type RetailCreateNestedManyWithoutUserInput = {
    create?: XOR<RetailCreateWithoutUserInput, RetailUncheckedCreateWithoutUserInput> | RetailCreateWithoutUserInput[] | RetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RetailCreateOrConnectWithoutUserInput | RetailCreateOrConnectWithoutUserInput[]
    createMany?: RetailCreateManyUserInputEnvelope
    connect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
  }

  export type DepartmentCreateNestedOneWithoutUsersInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserLoginCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLoginCreateWithoutUserInput, UserLoginUncheckedCreateWithoutUserInput> | UserLoginCreateWithoutUserInput[] | UserLoginUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLoginCreateOrConnectWithoutUserInput | UserLoginCreateOrConnectWithoutUserInput[]
    createMany?: UserLoginCreateManyUserInputEnvelope
    connect?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserFilterCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFilterCreateWithoutUserInput, UserFilterUncheckedCreateWithoutUserInput> | UserFilterCreateWithoutUserInput[] | UserFilterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFilterCreateOrConnectWithoutUserInput | UserFilterCreateOrConnectWithoutUserInput[]
    createMany?: UserFilterCreateManyUserInputEnvelope
    connect?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedOneWithoutDirectorInput = {
    create?: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDirectorInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DealFileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DealFileCreateWithoutUserInput, DealFileUncheckedCreateWithoutUserInput> | DealFileCreateWithoutUserInput[] | DealFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DealFileCreateOrConnectWithoutUserInput | DealFileCreateOrConnectWithoutUserInput[]
    createMany?: DealFileCreateManyUserInputEnvelope
    connect?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type RetailUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RetailCreateWithoutUserInput, RetailUncheckedCreateWithoutUserInput> | RetailCreateWithoutUserInput[] | RetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RetailCreateOrConnectWithoutUserInput | RetailCreateOrConnectWithoutUserInput[]
    createMany?: RetailCreateManyUserInputEnvelope
    connect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
  }

  export type UserLoginUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLoginCreateWithoutUserInput, UserLoginUncheckedCreateWithoutUserInput> | UserLoginCreateWithoutUserInput[] | UserLoginUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLoginCreateOrConnectWithoutUserInput | UserLoginCreateOrConnectWithoutUserInput[]
    createMany?: UserLoginCreateManyUserInputEnvelope
    connect?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserFilterUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFilterCreateWithoutUserInput, UserFilterUncheckedCreateWithoutUserInput> | UserFilterCreateWithoutUserInput[] | UserFilterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFilterCreateOrConnectWithoutUserInput | UserFilterCreateOrConnectWithoutUserInput[]
    createMany?: UserFilterCreateManyUserInputEnvelope
    connect?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DepartmentUpdateOneWithoutDirectorNestedInput = {
    create?: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDirectorInput
    upsert?: DepartmentUpsertWithoutDirectorInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutDirectorInput, DepartmentUpdateWithoutDirectorInput>, DepartmentUncheckedUpdateWithoutDirectorInput>
  }

  export type DealFileUpdateManyWithoutUserNestedInput = {
    create?: XOR<DealFileCreateWithoutUserInput, DealFileUncheckedCreateWithoutUserInput> | DealFileCreateWithoutUserInput[] | DealFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DealFileCreateOrConnectWithoutUserInput | DealFileCreateOrConnectWithoutUserInput[]
    upsert?: DealFileUpsertWithWhereUniqueWithoutUserInput | DealFileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DealFileCreateManyUserInputEnvelope
    set?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
    disconnect?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
    delete?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
    connect?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
    update?: DealFileUpdateWithWhereUniqueWithoutUserInput | DealFileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DealFileUpdateManyWithWhereWithoutUserInput | DealFileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DealFileScalarWhereInput | DealFileScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUserInput | ProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUserInput | ProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUserInput | ProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type RetailUpdateManyWithoutUserNestedInput = {
    create?: XOR<RetailCreateWithoutUserInput, RetailUncheckedCreateWithoutUserInput> | RetailCreateWithoutUserInput[] | RetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RetailCreateOrConnectWithoutUserInput | RetailCreateOrConnectWithoutUserInput[]
    upsert?: RetailUpsertWithWhereUniqueWithoutUserInput | RetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RetailCreateManyUserInputEnvelope
    set?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    disconnect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    delete?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    connect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    update?: RetailUpdateWithWhereUniqueWithoutUserInput | RetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RetailUpdateManyWithWhereWithoutUserInput | RetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RetailScalarWhereInput | RetailScalarWhereInput[]
  }

  export type DepartmentUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    upsert?: DepartmentUpsertWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutUsersInput, DepartmentUpdateWithoutUsersInput>, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type UserLoginUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLoginCreateWithoutUserInput, UserLoginUncheckedCreateWithoutUserInput> | UserLoginCreateWithoutUserInput[] | UserLoginUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLoginCreateOrConnectWithoutUserInput | UserLoginCreateOrConnectWithoutUserInput[]
    upsert?: UserLoginUpsertWithWhereUniqueWithoutUserInput | UserLoginUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLoginCreateManyUserInputEnvelope
    set?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
    disconnect?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
    delete?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
    connect?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
    update?: UserLoginUpdateWithWhereUniqueWithoutUserInput | UserLoginUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLoginUpdateManyWithWhereWithoutUserInput | UserLoginUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLoginScalarWhereInput | UserLoginScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserFilterUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFilterCreateWithoutUserInput, UserFilterUncheckedCreateWithoutUserInput> | UserFilterCreateWithoutUserInput[] | UserFilterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFilterCreateOrConnectWithoutUserInput | UserFilterCreateOrConnectWithoutUserInput[]
    upsert?: UserFilterUpsertWithWhereUniqueWithoutUserInput | UserFilterUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFilterCreateManyUserInputEnvelope
    set?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
    disconnect?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
    delete?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
    connect?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
    update?: UserFilterUpdateWithWhereUniqueWithoutUserInput | UserFilterUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFilterUpdateManyWithWhereWithoutUserInput | UserFilterUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFilterScalarWhereInput | UserFilterScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DepartmentUncheckedUpdateOneWithoutDirectorNestedInput = {
    create?: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDirectorInput
    upsert?: DepartmentUpsertWithoutDirectorInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutDirectorInput, DepartmentUpdateWithoutDirectorInput>, DepartmentUncheckedUpdateWithoutDirectorInput>
  }

  export type DealFileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DealFileCreateWithoutUserInput, DealFileUncheckedCreateWithoutUserInput> | DealFileCreateWithoutUserInput[] | DealFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DealFileCreateOrConnectWithoutUserInput | DealFileCreateOrConnectWithoutUserInput[]
    upsert?: DealFileUpsertWithWhereUniqueWithoutUserInput | DealFileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DealFileCreateManyUserInputEnvelope
    set?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
    disconnect?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
    delete?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
    connect?: DealFileWhereUniqueInput | DealFileWhereUniqueInput[]
    update?: DealFileUpdateWithWhereUniqueWithoutUserInput | DealFileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DealFileUpdateManyWithWhereWithoutUserInput | DealFileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DealFileScalarWhereInput | DealFileScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput> | ProjectCreateWithoutUserInput[] | ProjectUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUserInput | ProjectCreateOrConnectWithoutUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUserInput | ProjectUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectCreateManyUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUserInput | ProjectUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUserInput | ProjectUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type RetailUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RetailCreateWithoutUserInput, RetailUncheckedCreateWithoutUserInput> | RetailCreateWithoutUserInput[] | RetailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RetailCreateOrConnectWithoutUserInput | RetailCreateOrConnectWithoutUserInput[]
    upsert?: RetailUpsertWithWhereUniqueWithoutUserInput | RetailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RetailCreateManyUserInputEnvelope
    set?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    disconnect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    delete?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    connect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    update?: RetailUpdateWithWhereUniqueWithoutUserInput | RetailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RetailUpdateManyWithWhereWithoutUserInput | RetailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RetailScalarWhereInput | RetailScalarWhereInput[]
  }

  export type UserLoginUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLoginCreateWithoutUserInput, UserLoginUncheckedCreateWithoutUserInput> | UserLoginCreateWithoutUserInput[] | UserLoginUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLoginCreateOrConnectWithoutUserInput | UserLoginCreateOrConnectWithoutUserInput[]
    upsert?: UserLoginUpsertWithWhereUniqueWithoutUserInput | UserLoginUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLoginCreateManyUserInputEnvelope
    set?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
    disconnect?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
    delete?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
    connect?: UserLoginWhereUniqueInput | UserLoginWhereUniqueInput[]
    update?: UserLoginUpdateWithWhereUniqueWithoutUserInput | UserLoginUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLoginUpdateManyWithWhereWithoutUserInput | UserLoginUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLoginScalarWhereInput | UserLoginScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserFilterUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFilterCreateWithoutUserInput, UserFilterUncheckedCreateWithoutUserInput> | UserFilterCreateWithoutUserInput[] | UserFilterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFilterCreateOrConnectWithoutUserInput | UserFilterCreateOrConnectWithoutUserInput[]
    upsert?: UserFilterUpsertWithWhereUniqueWithoutUserInput | UserFilterUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFilterCreateManyUserInputEnvelope
    set?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
    disconnect?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
    delete?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
    connect?: UserFilterWhereUniqueInput | UserFilterWhereUniqueInput[]
    update?: UserFilterUpdateWithWhereUniqueWithoutUserInput | UserFilterUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFilterUpdateManyWithWhereWithoutUserInput | UserFilterUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFilterScalarWhereInput | UserFilterScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutUserPermissionsInput = {
    create?: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUserPermissionsInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    upsert?: UserUpsertWithoutPermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPermissionsInput, UserUpdateWithoutPermissionsInput>, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput = {
    create?: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUserPermissionsInput
    upsert?: PermissionUpsertWithoutUserPermissionsInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutUserPermissionsInput, PermissionUpdateWithoutUserPermissionsInput>, PermissionUncheckedUpdateWithoutUserPermissionsInput>
  }

  export type UserPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type EnumPermissionEnumFieldUpdateOperationsInput = {
    set?: $Enums.PermissionEnum
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDirectorOfInput = {
    create?: XOR<UserCreateWithoutDirectorOfInput, UserUncheckedCreateWithoutDirectorOfInput>
    connectOrCreate?: UserCreateOrConnectWithoutDirectorOfInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type EnumDepartmentEnumFieldUpdateOperationsInput = {
    set?: $Enums.DepartmentEnum
  }

  export type UserUpdateOneWithoutDirectorOfNestedInput = {
    create?: XOR<UserCreateWithoutDirectorOfInput, UserUncheckedCreateWithoutDirectorOfInput>
    connectOrCreate?: UserCreateOrConnectWithoutDirectorOfInput
    upsert?: UserUpsertWithoutDirectorOfInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDirectorOfInput, UserUpdateWithoutDirectorOfInput>, UserUncheckedUpdateWithoutDirectorOfInput>
  }

  export type UserUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type AdditionalContactCreateNestedManyWithoutProjectsInput = {
    create?: XOR<AdditionalContactCreateWithoutProjectsInput, AdditionalContactUncheckedCreateWithoutProjectsInput> | AdditionalContactCreateWithoutProjectsInput[] | AdditionalContactUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: AdditionalContactCreateOrConnectWithoutProjectsInput | AdditionalContactCreateOrConnectWithoutProjectsInput[]
    connect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
  }

  export type AdditionalContactUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<AdditionalContactCreateWithoutProjectsInput, AdditionalContactUncheckedCreateWithoutProjectsInput> | AdditionalContactCreateWithoutProjectsInput[] | AdditionalContactUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: AdditionalContactCreateOrConnectWithoutProjectsInput | AdditionalContactCreateOrConnectWithoutProjectsInput[]
    connect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
  }

  export type EnumDealTypeFieldUpdateOperationsInput = {
    set?: $Enums.DealType
  }

  export type EnumDirectionProjectFieldUpdateOperationsInput = {
    set?: $Enums.DirectionProject
  }

  export type NullableEnumDeliveryProjectFieldUpdateOperationsInput = {
    set?: $Enums.DeliveryProject | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumStatusProjectFieldUpdateOperationsInput = {
    set?: $Enums.StatusProject
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsInput, UserUpdateWithoutProjectsInput>, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type AdditionalContactUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<AdditionalContactCreateWithoutProjectsInput, AdditionalContactUncheckedCreateWithoutProjectsInput> | AdditionalContactCreateWithoutProjectsInput[] | AdditionalContactUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: AdditionalContactCreateOrConnectWithoutProjectsInput | AdditionalContactCreateOrConnectWithoutProjectsInput[]
    upsert?: AdditionalContactUpsertWithWhereUniqueWithoutProjectsInput | AdditionalContactUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    disconnect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    delete?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    connect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    update?: AdditionalContactUpdateWithWhereUniqueWithoutProjectsInput | AdditionalContactUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: AdditionalContactUpdateManyWithWhereWithoutProjectsInput | AdditionalContactUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: AdditionalContactScalarWhereInput | AdditionalContactScalarWhereInput[]
  }

  export type AdditionalContactUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<AdditionalContactCreateWithoutProjectsInput, AdditionalContactUncheckedCreateWithoutProjectsInput> | AdditionalContactCreateWithoutProjectsInput[] | AdditionalContactUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: AdditionalContactCreateOrConnectWithoutProjectsInput | AdditionalContactCreateOrConnectWithoutProjectsInput[]
    upsert?: AdditionalContactUpsertWithWhereUniqueWithoutProjectsInput | AdditionalContactUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    disconnect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    delete?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    connect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    update?: AdditionalContactUpdateWithWhereUniqueWithoutProjectsInput | AdditionalContactUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: AdditionalContactUpdateManyWithWhereWithoutProjectsInput | AdditionalContactUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: AdditionalContactScalarWhereInput | AdditionalContactScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRetailInput = {
    create?: XOR<UserCreateWithoutRetailInput, UserUncheckedCreateWithoutRetailInput>
    connectOrCreate?: UserCreateOrConnectWithoutRetailInput
    connect?: UserWhereUniqueInput
  }

  export type AdditionalContactCreateNestedManyWithoutRetailsInput = {
    create?: XOR<AdditionalContactCreateWithoutRetailsInput, AdditionalContactUncheckedCreateWithoutRetailsInput> | AdditionalContactCreateWithoutRetailsInput[] | AdditionalContactUncheckedCreateWithoutRetailsInput[]
    connectOrCreate?: AdditionalContactCreateOrConnectWithoutRetailsInput | AdditionalContactCreateOrConnectWithoutRetailsInput[]
    connect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
  }

  export type AdditionalContactUncheckedCreateNestedManyWithoutRetailsInput = {
    create?: XOR<AdditionalContactCreateWithoutRetailsInput, AdditionalContactUncheckedCreateWithoutRetailsInput> | AdditionalContactCreateWithoutRetailsInput[] | AdditionalContactUncheckedCreateWithoutRetailsInput[]
    connectOrCreate?: AdditionalContactCreateOrConnectWithoutRetailsInput | AdditionalContactCreateOrConnectWithoutRetailsInput[]
    connect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
  }

  export type EnumDirectionRetailFieldUpdateOperationsInput = {
    set?: $Enums.DirectionRetail
  }

  export type NullableEnumDeliveryRetailFieldUpdateOperationsInput = {
    set?: $Enums.DeliveryRetail | null
  }

  export type EnumStatusRetailFieldUpdateOperationsInput = {
    set?: $Enums.StatusRetail
  }

  export type UserUpdateOneRequiredWithoutRetailNestedInput = {
    create?: XOR<UserCreateWithoutRetailInput, UserUncheckedCreateWithoutRetailInput>
    connectOrCreate?: UserCreateOrConnectWithoutRetailInput
    upsert?: UserUpsertWithoutRetailInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRetailInput, UserUpdateWithoutRetailInput>, UserUncheckedUpdateWithoutRetailInput>
  }

  export type AdditionalContactUpdateManyWithoutRetailsNestedInput = {
    create?: XOR<AdditionalContactCreateWithoutRetailsInput, AdditionalContactUncheckedCreateWithoutRetailsInput> | AdditionalContactCreateWithoutRetailsInput[] | AdditionalContactUncheckedCreateWithoutRetailsInput[]
    connectOrCreate?: AdditionalContactCreateOrConnectWithoutRetailsInput | AdditionalContactCreateOrConnectWithoutRetailsInput[]
    upsert?: AdditionalContactUpsertWithWhereUniqueWithoutRetailsInput | AdditionalContactUpsertWithWhereUniqueWithoutRetailsInput[]
    set?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    disconnect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    delete?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    connect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    update?: AdditionalContactUpdateWithWhereUniqueWithoutRetailsInput | AdditionalContactUpdateWithWhereUniqueWithoutRetailsInput[]
    updateMany?: AdditionalContactUpdateManyWithWhereWithoutRetailsInput | AdditionalContactUpdateManyWithWhereWithoutRetailsInput[]
    deleteMany?: AdditionalContactScalarWhereInput | AdditionalContactScalarWhereInput[]
  }

  export type AdditionalContactUncheckedUpdateManyWithoutRetailsNestedInput = {
    create?: XOR<AdditionalContactCreateWithoutRetailsInput, AdditionalContactUncheckedCreateWithoutRetailsInput> | AdditionalContactCreateWithoutRetailsInput[] | AdditionalContactUncheckedCreateWithoutRetailsInput[]
    connectOrCreate?: AdditionalContactCreateOrConnectWithoutRetailsInput | AdditionalContactCreateOrConnectWithoutRetailsInput[]
    upsert?: AdditionalContactUpsertWithWhereUniqueWithoutRetailsInput | AdditionalContactUpsertWithWhereUniqueWithoutRetailsInput[]
    set?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    disconnect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    delete?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    connect?: AdditionalContactWhereUniqueInput | AdditionalContactWhereUniqueInput[]
    update?: AdditionalContactUpdateWithWhereUniqueWithoutRetailsInput | AdditionalContactUpdateWithWhereUniqueWithoutRetailsInput[]
    updateMany?: AdditionalContactUpdateManyWithWhereWithoutRetailsInput | AdditionalContactUpdateManyWithWhereWithoutRetailsInput[]
    deleteMany?: AdditionalContactScalarWhereInput | AdditionalContactScalarWhereInput[]
  }

  export type ProjectCreateNestedManyWithoutAdditionalContactsInput = {
    create?: XOR<ProjectCreateWithoutAdditionalContactsInput, ProjectUncheckedCreateWithoutAdditionalContactsInput> | ProjectCreateWithoutAdditionalContactsInput[] | ProjectUncheckedCreateWithoutAdditionalContactsInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAdditionalContactsInput | ProjectCreateOrConnectWithoutAdditionalContactsInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type RetailCreateNestedManyWithoutAdditionalContactsInput = {
    create?: XOR<RetailCreateWithoutAdditionalContactsInput, RetailUncheckedCreateWithoutAdditionalContactsInput> | RetailCreateWithoutAdditionalContactsInput[] | RetailUncheckedCreateWithoutAdditionalContactsInput[]
    connectOrCreate?: RetailCreateOrConnectWithoutAdditionalContactsInput | RetailCreateOrConnectWithoutAdditionalContactsInput[]
    connect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutAdditionalContactsInput = {
    create?: XOR<ProjectCreateWithoutAdditionalContactsInput, ProjectUncheckedCreateWithoutAdditionalContactsInput> | ProjectCreateWithoutAdditionalContactsInput[] | ProjectUncheckedCreateWithoutAdditionalContactsInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAdditionalContactsInput | ProjectCreateOrConnectWithoutAdditionalContactsInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type RetailUncheckedCreateNestedManyWithoutAdditionalContactsInput = {
    create?: XOR<RetailCreateWithoutAdditionalContactsInput, RetailUncheckedCreateWithoutAdditionalContactsInput> | RetailCreateWithoutAdditionalContactsInput[] | RetailUncheckedCreateWithoutAdditionalContactsInput[]
    connectOrCreate?: RetailCreateOrConnectWithoutAdditionalContactsInput | RetailCreateOrConnectWithoutAdditionalContactsInput[]
    connect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
  }

  export type ProjectUpdateManyWithoutAdditionalContactsNestedInput = {
    create?: XOR<ProjectCreateWithoutAdditionalContactsInput, ProjectUncheckedCreateWithoutAdditionalContactsInput> | ProjectCreateWithoutAdditionalContactsInput[] | ProjectUncheckedCreateWithoutAdditionalContactsInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAdditionalContactsInput | ProjectCreateOrConnectWithoutAdditionalContactsInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutAdditionalContactsInput | ProjectUpsertWithWhereUniqueWithoutAdditionalContactsInput[]
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutAdditionalContactsInput | ProjectUpdateWithWhereUniqueWithoutAdditionalContactsInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutAdditionalContactsInput | ProjectUpdateManyWithWhereWithoutAdditionalContactsInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type RetailUpdateManyWithoutAdditionalContactsNestedInput = {
    create?: XOR<RetailCreateWithoutAdditionalContactsInput, RetailUncheckedCreateWithoutAdditionalContactsInput> | RetailCreateWithoutAdditionalContactsInput[] | RetailUncheckedCreateWithoutAdditionalContactsInput[]
    connectOrCreate?: RetailCreateOrConnectWithoutAdditionalContactsInput | RetailCreateOrConnectWithoutAdditionalContactsInput[]
    upsert?: RetailUpsertWithWhereUniqueWithoutAdditionalContactsInput | RetailUpsertWithWhereUniqueWithoutAdditionalContactsInput[]
    set?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    disconnect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    delete?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    connect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    update?: RetailUpdateWithWhereUniqueWithoutAdditionalContactsInput | RetailUpdateWithWhereUniqueWithoutAdditionalContactsInput[]
    updateMany?: RetailUpdateManyWithWhereWithoutAdditionalContactsInput | RetailUpdateManyWithWhereWithoutAdditionalContactsInput[]
    deleteMany?: RetailScalarWhereInput | RetailScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutAdditionalContactsNestedInput = {
    create?: XOR<ProjectCreateWithoutAdditionalContactsInput, ProjectUncheckedCreateWithoutAdditionalContactsInput> | ProjectCreateWithoutAdditionalContactsInput[] | ProjectUncheckedCreateWithoutAdditionalContactsInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutAdditionalContactsInput | ProjectCreateOrConnectWithoutAdditionalContactsInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutAdditionalContactsInput | ProjectUpsertWithWhereUniqueWithoutAdditionalContactsInput[]
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutAdditionalContactsInput | ProjectUpdateWithWhereUniqueWithoutAdditionalContactsInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutAdditionalContactsInput | ProjectUpdateManyWithWhereWithoutAdditionalContactsInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type RetailUncheckedUpdateManyWithoutAdditionalContactsNestedInput = {
    create?: XOR<RetailCreateWithoutAdditionalContactsInput, RetailUncheckedCreateWithoutAdditionalContactsInput> | RetailCreateWithoutAdditionalContactsInput[] | RetailUncheckedCreateWithoutAdditionalContactsInput[]
    connectOrCreate?: RetailCreateOrConnectWithoutAdditionalContactsInput | RetailCreateOrConnectWithoutAdditionalContactsInput[]
    upsert?: RetailUpsertWithWhereUniqueWithoutAdditionalContactsInput | RetailUpsertWithWhereUniqueWithoutAdditionalContactsInput[]
    set?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    disconnect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    delete?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    connect?: RetailWhereUniqueInput | RetailWhereUniqueInput[]
    update?: RetailUpdateWithWhereUniqueWithoutAdditionalContactsInput | RetailUpdateWithWhereUniqueWithoutAdditionalContactsInput[]
    updateMany?: RetailUpdateManyWithWhereWithoutAdditionalContactsInput | RetailUpdateManyWithWhereWithoutAdditionalContactsInput[]
    deleteMany?: RetailScalarWhereInput | RetailScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLoginInput = {
    create?: XOR<UserCreateWithoutLoginInput, UserUncheckedCreateWithoutLoginInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLoginNestedInput = {
    create?: XOR<UserCreateWithoutLoginInput, UserUncheckedCreateWithoutLoginInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginInput
    upsert?: UserUpsertWithoutLoginInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLoginInput, UserUpdateWithoutLoginInput>, UserUncheckedUpdateWithoutLoginInput>
  }

  export type UserCreateNestedOneWithoutFileInput = {
    create?: XOR<UserCreateWithoutFileInput, UserUncheckedCreateWithoutFileInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStorageTypeFieldUpdateOperationsInput = {
    set?: $Enums.StorageType
  }

  export type UserUpdateOneRequiredWithoutFileNestedInput = {
    create?: XOR<UserCreateWithoutFileInput, UserUncheckedCreateWithoutFileInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileInput
    upsert?: UserUpsertWithoutFileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFileInput, UserUpdateWithoutFileInput>, UserUncheckedUpdateWithoutFileInput>
  }

  export type UserCreateNestedOneWithoutUserFiltersInput = {
    create?: XOR<UserCreateWithoutUserFiltersInput, UserUncheckedCreateWithoutUserFiltersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFiltersInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutUserFiltersNestedInput = {
    create?: XOR<UserCreateWithoutUserFiltersInput, UserUncheckedCreateWithoutUserFiltersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFiltersInput
    upsert?: UserUpsertWithoutUserFiltersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserFiltersInput, UserUpdateWithoutUserFiltersInput>, UserUncheckedUpdateWithoutUserFiltersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumPermissionEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionEnum | EnumPermissionEnumFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionEnum[]
    notIn?: $Enums.PermissionEnum[]
    not?: NestedEnumPermissionEnumFilter<$PrismaModel> | $Enums.PermissionEnum
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumPermissionEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionEnum | EnumPermissionEnumFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionEnum[]
    notIn?: $Enums.PermissionEnum[]
    not?: NestedEnumPermissionEnumWithAggregatesFilter<$PrismaModel> | $Enums.PermissionEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionEnumFilter<$PrismaModel>
    _max?: NestedEnumPermissionEnumFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumDepartmentEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentEnum | EnumDepartmentEnumFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentEnum[]
    notIn?: $Enums.DepartmentEnum[]
    not?: NestedEnumDepartmentEnumFilter<$PrismaModel> | $Enums.DepartmentEnum
  }

  export type NestedEnumDepartmentEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentEnum | EnumDepartmentEnumFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentEnum[]
    notIn?: $Enums.DepartmentEnum[]
    not?: NestedEnumDepartmentEnumWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentEnumFilter<$PrismaModel>
    _max?: NestedEnumDepartmentEnumFilter<$PrismaModel>
  }

  export type NestedEnumDealTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DealType | EnumDealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DealType[]
    notIn?: $Enums.DealType[]
    not?: NestedEnumDealTypeFilter<$PrismaModel> | $Enums.DealType
  }

  export type NestedEnumDirectionProjectFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionProject | EnumDirectionProjectFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionProject[]
    notIn?: $Enums.DirectionProject[]
    not?: NestedEnumDirectionProjectFilter<$PrismaModel> | $Enums.DirectionProject
  }

  export type NestedEnumDeliveryProjectNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryProject | EnumDeliveryProjectFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeliveryProject[] | null
    notIn?: $Enums.DeliveryProject[] | null
    not?: NestedEnumDeliveryProjectNullableFilter<$PrismaModel> | $Enums.DeliveryProject | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumStatusProjectFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusProject | EnumStatusProjectFieldRefInput<$PrismaModel>
    in?: $Enums.StatusProject[]
    notIn?: $Enums.StatusProject[]
    not?: NestedEnumStatusProjectFilter<$PrismaModel> | $Enums.StatusProject
  }

  export type NestedEnumDealTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DealType | EnumDealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DealType[]
    notIn?: $Enums.DealType[]
    not?: NestedEnumDealTypeWithAggregatesFilter<$PrismaModel> | $Enums.DealType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDealTypeFilter<$PrismaModel>
    _max?: NestedEnumDealTypeFilter<$PrismaModel>
  }

  export type NestedEnumDirectionProjectWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionProject | EnumDirectionProjectFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionProject[]
    notIn?: $Enums.DirectionProject[]
    not?: NestedEnumDirectionProjectWithAggregatesFilter<$PrismaModel> | $Enums.DirectionProject
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDirectionProjectFilter<$PrismaModel>
    _max?: NestedEnumDirectionProjectFilter<$PrismaModel>
  }

  export type NestedEnumDeliveryProjectNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryProject | EnumDeliveryProjectFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeliveryProject[] | null
    notIn?: $Enums.DeliveryProject[] | null
    not?: NestedEnumDeliveryProjectNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryProject | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeliveryProjectNullableFilter<$PrismaModel>
    _max?: NestedEnumDeliveryProjectNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatusProjectWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusProject | EnumStatusProjectFieldRefInput<$PrismaModel>
    in?: $Enums.StatusProject[]
    notIn?: $Enums.StatusProject[]
    not?: NestedEnumStatusProjectWithAggregatesFilter<$PrismaModel> | $Enums.StatusProject
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusProjectFilter<$PrismaModel>
    _max?: NestedEnumStatusProjectFilter<$PrismaModel>
  }

  export type NestedEnumDirectionRetailFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionRetail | EnumDirectionRetailFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionRetail[]
    notIn?: $Enums.DirectionRetail[]
    not?: NestedEnumDirectionRetailFilter<$PrismaModel> | $Enums.DirectionRetail
  }

  export type NestedEnumDeliveryRetailNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryRetail | EnumDeliveryRetailFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeliveryRetail[] | null
    notIn?: $Enums.DeliveryRetail[] | null
    not?: NestedEnumDeliveryRetailNullableFilter<$PrismaModel> | $Enums.DeliveryRetail | null
  }

  export type NestedEnumStatusRetailFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusRetail | EnumStatusRetailFieldRefInput<$PrismaModel>
    in?: $Enums.StatusRetail[]
    notIn?: $Enums.StatusRetail[]
    not?: NestedEnumStatusRetailFilter<$PrismaModel> | $Enums.StatusRetail
  }

  export type NestedEnumDirectionRetailWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionRetail | EnumDirectionRetailFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionRetail[]
    notIn?: $Enums.DirectionRetail[]
    not?: NestedEnumDirectionRetailWithAggregatesFilter<$PrismaModel> | $Enums.DirectionRetail
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDirectionRetailFilter<$PrismaModel>
    _max?: NestedEnumDirectionRetailFilter<$PrismaModel>
  }

  export type NestedEnumDeliveryRetailNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryRetail | EnumDeliveryRetailFieldRefInput<$PrismaModel> | null
    in?: $Enums.DeliveryRetail[] | null
    notIn?: $Enums.DeliveryRetail[] | null
    not?: NestedEnumDeliveryRetailNullableWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryRetail | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDeliveryRetailNullableFilter<$PrismaModel>
    _max?: NestedEnumDeliveryRetailNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatusRetailWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusRetail | EnumStatusRetailFieldRefInput<$PrismaModel>
    in?: $Enums.StatusRetail[]
    notIn?: $Enums.StatusRetail[]
    not?: NestedEnumStatusRetailWithAggregatesFilter<$PrismaModel> | $Enums.StatusRetail
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusRetailFilter<$PrismaModel>
    _max?: NestedEnumStatusRetailFilter<$PrismaModel>
  }

  export type NestedEnumStorageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageType | EnumStorageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StorageType[]
    notIn?: $Enums.StorageType[]
    not?: NestedEnumStorageTypeFilter<$PrismaModel> | $Enums.StorageType
  }

  export type NestedEnumStorageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StorageType | EnumStorageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StorageType[]
    notIn?: $Enums.StorageType[]
    not?: NestedEnumStorageTypeWithAggregatesFilter<$PrismaModel> | $Enums.StorageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStorageTypeFilter<$PrismaModel>
    _max?: NestedEnumStorageTypeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DepartmentCreateWithoutDirectorInput = {
    name: $Enums.DepartmentEnum
    description: string
    users?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutDirectorInput = {
    id?: number
    name: $Enums.DepartmentEnum
    description: string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutDirectorInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
  }

  export type DealFileCreateWithoutUserInput = {
    id?: string
    name: string
    localPath: string
    storageType?: $Enums.StorageType
    dealId: string
    dealType: $Enums.DealType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DealFileUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    localPath: string
    storageType?: $Enums.StorageType
    dealId: string
    dealType: $Enums.DealType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DealFileCreateOrConnectWithoutUserInput = {
    where: DealFileWhereUniqueInput
    create: XOR<DealFileCreateWithoutUserInput, DealFileUncheckedCreateWithoutUserInput>
  }

  export type DealFileCreateManyUserInputEnvelope = {
    data: DealFileCreateManyUserInput | DealFileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutUserInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionProject
    deliveryType?: $Enums.DeliveryProject | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    amountPurchase?: Decimal | DecimalJsLike | number | string | null
    amountWork?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    comments: string
    dealStatus: $Enums.StatusProject
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    additionalContacts?: AdditionalContactCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutUserInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionProject
    deliveryType?: $Enums.DeliveryProject | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    amountPurchase?: Decimal | DecimalJsLike | number | string | null
    amountWork?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    comments: string
    dealStatus: $Enums.StatusProject
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    additionalContacts?: AdditionalContactUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectCreateOrConnectWithoutUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
  }

  export type ProjectCreateManyUserInputEnvelope = {
    data: ProjectCreateManyUserInput | ProjectCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RetailCreateWithoutUserInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionRetail
    deliveryType?: $Enums.DeliveryRetail | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    dealStatus: $Enums.StatusRetail
    comments: string
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    additionalContacts?: AdditionalContactCreateNestedManyWithoutRetailsInput
  }

  export type RetailUncheckedCreateWithoutUserInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionRetail
    deliveryType?: $Enums.DeliveryRetail | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    dealStatus: $Enums.StatusRetail
    comments: string
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    additionalContacts?: AdditionalContactUncheckedCreateNestedManyWithoutRetailsInput
  }

  export type RetailCreateOrConnectWithoutUserInput = {
    where: RetailWhereUniqueInput
    create: XOR<RetailCreateWithoutUserInput, RetailUncheckedCreateWithoutUserInput>
  }

  export type RetailCreateManyUserInputEnvelope = {
    data: RetailCreateManyUserInput | RetailCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutUsersInput = {
    name: $Enums.DepartmentEnum
    description: string
    director?: UserCreateNestedOneWithoutDirectorOfInput
  }

  export type DepartmentUncheckedCreateWithoutUsersInput = {
    id?: number
    name: $Enums.DepartmentEnum
    directorId?: string | null
    description: string
  }

  export type DepartmentCreateOrConnectWithoutUsersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
  }

  export type UserLoginCreateWithoutUserInput = {
    id?: string
    loginAt?: Date | string
  }

  export type UserLoginUncheckedCreateWithoutUserInput = {
    id?: string
    loginAt?: Date | string
  }

  export type UserLoginCreateOrConnectWithoutUserInput = {
    where: UserLoginWhereUniqueInput
    create: XOR<UserLoginCreateWithoutUserInput, UserLoginUncheckedCreateWithoutUserInput>
  }

  export type UserLoginCreateManyUserInputEnvelope = {
    data: UserLoginCreateManyUserInput | UserLoginCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutUserInput = {
    id?: string
    permission: PermissionCreateNestedOneWithoutUserPermissionsInput
  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    id?: string
    permissionId: string
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserFilterCreateWithoutUserInput = {
    id?: string
    filterName: string
    filterValue: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserFilterUncheckedCreateWithoutUserInput = {
    id?: string
    filterName: string
    filterValue: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserFilterCreateOrConnectWithoutUserInput = {
    where: UserFilterWhereUniqueInput
    create: XOR<UserFilterCreateWithoutUserInput, UserFilterUncheckedCreateWithoutUserInput>
  }

  export type UserFilterCreateManyUserInputEnvelope = {
    data: UserFilterCreateManyUserInput | UserFilterCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutDirectorInput = {
    update: XOR<DepartmentUpdateWithoutDirectorInput, DepartmentUncheckedUpdateWithoutDirectorInput>
    create: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutDirectorInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutDirectorInput, DepartmentUncheckedUpdateWithoutDirectorInput>
  }

  export type DepartmentUpdateWithoutDirectorInput = {
    name?: EnumDepartmentEnumFieldUpdateOperationsInput | $Enums.DepartmentEnum
    description?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutDirectorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumDepartmentEnumFieldUpdateOperationsInput | $Enums.DepartmentEnum
    description?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DealFileUpsertWithWhereUniqueWithoutUserInput = {
    where: DealFileWhereUniqueInput
    update: XOR<DealFileUpdateWithoutUserInput, DealFileUncheckedUpdateWithoutUserInput>
    create: XOR<DealFileCreateWithoutUserInput, DealFileUncheckedCreateWithoutUserInput>
  }

  export type DealFileUpdateWithWhereUniqueWithoutUserInput = {
    where: DealFileWhereUniqueInput
    data: XOR<DealFileUpdateWithoutUserInput, DealFileUncheckedUpdateWithoutUserInput>
  }

  export type DealFileUpdateManyWithWhereWithoutUserInput = {
    where: DealFileScalarWhereInput
    data: XOR<DealFileUpdateManyMutationInput, DealFileUncheckedUpdateManyWithoutUserInput>
  }

  export type DealFileScalarWhereInput = {
    AND?: DealFileScalarWhereInput | DealFileScalarWhereInput[]
    OR?: DealFileScalarWhereInput[]
    NOT?: DealFileScalarWhereInput | DealFileScalarWhereInput[]
    id?: StringFilter<"DealFile"> | string
    name?: StringFilter<"DealFile"> | string
    localPath?: StringFilter<"DealFile"> | string
    storageType?: EnumStorageTypeFilter<"DealFile"> | $Enums.StorageType
    userId?: StringFilter<"DealFile"> | string
    dealId?: StringFilter<"DealFile"> | string
    dealType?: EnumDealTypeFilter<"DealFile"> | $Enums.DealType
    createdAt?: DateTimeFilter<"DealFile"> | Date | string
    updatedAt?: DateTimeFilter<"DealFile"> | Date | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectCreateWithoutUserInput, ProjectUncheckedCreateWithoutUserInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutUserInput, ProjectUncheckedUpdateWithoutUserInput>
  }

  export type ProjectUpdateManyWithWhereWithoutUserInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    userId?: StringFilter<"Project"> | string
    type?: EnumDealTypeFilter<"Project"> | $Enums.DealType
    dateRequest?: DateTimeFilter<"Project"> | Date | string
    nameDeal?: StringFilter<"Project"> | string
    nameObject?: StringFilter<"Project"> | string
    direction?: EnumDirectionProjectFilter<"Project"> | $Enums.DirectionProject
    deliveryType?: EnumDeliveryProjectNullableFilter<"Project"> | $Enums.DeliveryProject | null
    contact?: StringFilter<"Project"> | string
    phone?: StringNullableFilter<"Project"> | string | null
    email?: StringNullableFilter<"Project"> | string | null
    amountCP?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    amountWork?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    delta?: DecimalNullableFilter<"Project"> | Decimal | DecimalJsLike | number | string | null
    comments?: StringFilter<"Project"> | string
    dealStatus?: EnumStatusProjectFilter<"Project"> | $Enums.StatusProject
    plannedDateConnection?: DateTimeNullableFilter<"Project"> | Date | string | null
    resource?: StringNullableFilter<"Project"> | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
  }

  export type RetailUpsertWithWhereUniqueWithoutUserInput = {
    where: RetailWhereUniqueInput
    update: XOR<RetailUpdateWithoutUserInput, RetailUncheckedUpdateWithoutUserInput>
    create: XOR<RetailCreateWithoutUserInput, RetailUncheckedCreateWithoutUserInput>
  }

  export type RetailUpdateWithWhereUniqueWithoutUserInput = {
    where: RetailWhereUniqueInput
    data: XOR<RetailUpdateWithoutUserInput, RetailUncheckedUpdateWithoutUserInput>
  }

  export type RetailUpdateManyWithWhereWithoutUserInput = {
    where: RetailScalarWhereInput
    data: XOR<RetailUpdateManyMutationInput, RetailUncheckedUpdateManyWithoutUserInput>
  }

  export type RetailScalarWhereInput = {
    AND?: RetailScalarWhereInput | RetailScalarWhereInput[]
    OR?: RetailScalarWhereInput[]
    NOT?: RetailScalarWhereInput | RetailScalarWhereInput[]
    id?: StringFilter<"Retail"> | string
    userId?: StringFilter<"Retail"> | string
    type?: EnumDealTypeFilter<"Retail"> | $Enums.DealType
    dateRequest?: DateTimeFilter<"Retail"> | Date | string
    nameDeal?: StringFilter<"Retail"> | string
    nameObject?: StringFilter<"Retail"> | string
    direction?: EnumDirectionRetailFilter<"Retail"> | $Enums.DirectionRetail
    deliveryType?: EnumDeliveryRetailNullableFilter<"Retail"> | $Enums.DeliveryRetail | null
    contact?: StringFilter<"Retail"> | string
    phone?: StringNullableFilter<"Retail"> | string | null
    email?: StringNullableFilter<"Retail"> | string | null
    amountCP?: DecimalNullableFilter<"Retail"> | Decimal | DecimalJsLike | number | string | null
    delta?: DecimalNullableFilter<"Retail"> | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFilter<"Retail"> | $Enums.StatusRetail
    comments?: StringFilter<"Retail"> | string
    plannedDateConnection?: DateTimeNullableFilter<"Retail"> | Date | string | null
    resource?: StringNullableFilter<"Retail"> | string | null
    createdAt?: DateTimeFilter<"Retail"> | Date | string
    updatedAt?: DateTimeFilter<"Retail"> | Date | string
  }

  export type DepartmentUpsertWithoutUsersInput = {
    update: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutUsersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateWithoutUsersInput = {
    name?: EnumDepartmentEnumFieldUpdateOperationsInput | $Enums.DepartmentEnum
    description?: StringFieldUpdateOperationsInput | string
    director?: UserUpdateOneWithoutDirectorOfNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumDepartmentEnumFieldUpdateOperationsInput | $Enums.DepartmentEnum
    directorId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
  }

  export type UserLoginUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLoginWhereUniqueInput
    update: XOR<UserLoginUpdateWithoutUserInput, UserLoginUncheckedUpdateWithoutUserInput>
    create: XOR<UserLoginCreateWithoutUserInput, UserLoginUncheckedCreateWithoutUserInput>
  }

  export type UserLoginUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLoginWhereUniqueInput
    data: XOR<UserLoginUpdateWithoutUserInput, UserLoginUncheckedUpdateWithoutUserInput>
  }

  export type UserLoginUpdateManyWithWhereWithoutUserInput = {
    where: UserLoginScalarWhereInput
    data: XOR<UserLoginUpdateManyMutationInput, UserLoginUncheckedUpdateManyWithoutUserInput>
  }

  export type UserLoginScalarWhereInput = {
    AND?: UserLoginScalarWhereInput | UserLoginScalarWhereInput[]
    OR?: UserLoginScalarWhereInput[]
    NOT?: UserLoginScalarWhereInput | UserLoginScalarWhereInput[]
    id?: StringFilter<"UserLogin"> | string
    userId?: StringFilter<"UserLogin"> | string
    loginAt?: DateTimeFilter<"UserLogin"> | Date | string
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    id?: StringFilter<"UserPermission"> | string
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
  }

  export type UserFilterUpsertWithWhereUniqueWithoutUserInput = {
    where: UserFilterWhereUniqueInput
    update: XOR<UserFilterUpdateWithoutUserInput, UserFilterUncheckedUpdateWithoutUserInput>
    create: XOR<UserFilterCreateWithoutUserInput, UserFilterUncheckedCreateWithoutUserInput>
  }

  export type UserFilterUpdateWithWhereUniqueWithoutUserInput = {
    where: UserFilterWhereUniqueInput
    data: XOR<UserFilterUpdateWithoutUserInput, UserFilterUncheckedUpdateWithoutUserInput>
  }

  export type UserFilterUpdateManyWithWhereWithoutUserInput = {
    where: UserFilterScalarWhereInput
    data: XOR<UserFilterUpdateManyMutationInput, UserFilterUncheckedUpdateManyWithoutUserInput>
  }

  export type UserFilterScalarWhereInput = {
    AND?: UserFilterScalarWhereInput | UserFilterScalarWhereInput[]
    OR?: UserFilterScalarWhereInput[]
    NOT?: UserFilterScalarWhereInput | UserFilterScalarWhereInput[]
    id?: StringFilter<"UserFilter"> | string
    userId?: StringFilter<"UserFilter"> | string
    filterName?: StringFilter<"UserFilter"> | string
    filterValue?: StringFilter<"UserFilter"> | string
    isActive?: BoolFilter<"UserFilter"> | boolean
    createdAt?: DateTimeFilter<"UserFilter"> | Date | string
    updatedAt?: DateTimeFilter<"UserFilter"> | Date | string
  }

  export type UserCreateWithoutPermissionsInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    File?: DealFileCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    retail?: RetailCreateNestedManyWithoutUserInput
    department: DepartmentCreateNestedOneWithoutUsersInput
    login?: UserLoginCreateNestedManyWithoutUserInput
    userFilters?: UserFilterCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPermissionsInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    File?: DealFileUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    retail?: RetailUncheckedCreateNestedManyWithoutUserInput
    login?: UserLoginUncheckedCreateNestedManyWithoutUserInput
    userFilters?: UserFilterUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutUserPermissionsInput = {
    id?: string
    name: $Enums.PermissionEnum
    description?: string | null
  }

  export type PermissionUncheckedCreateWithoutUserPermissionsInput = {
    id?: string
    name: $Enums.PermissionEnum
    description?: string | null
  }

  export type PermissionCreateOrConnectWithoutUserPermissionsInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
  }

  export type UserUpsertWithoutPermissionsInput = {
    update: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    File?: DealFileUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    retail?: RetailUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
    login?: UserLoginUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    File?: DealFileUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    retail?: RetailUncheckedUpdateManyWithoutUserNestedInput
    login?: UserLoginUncheckedUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PermissionUpsertWithoutUserPermissionsInput = {
    update: XOR<PermissionUpdateWithoutUserPermissionsInput, PermissionUncheckedUpdateWithoutUserPermissionsInput>
    create: XOR<PermissionCreateWithoutUserPermissionsInput, PermissionUncheckedCreateWithoutUserPermissionsInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutUserPermissionsInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutUserPermissionsInput, PermissionUncheckedUpdateWithoutUserPermissionsInput>
  }

  export type PermissionUpdateWithoutUserPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumPermissionEnumFieldUpdateOperationsInput | $Enums.PermissionEnum
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionUncheckedUpdateWithoutUserPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumPermissionEnumFieldUpdateOperationsInput | $Enums.PermissionEnum
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionCreateWithoutPermissionInput = {
    id?: string
    user: UserCreateNestedOneWithoutPermissionsInput
  }

  export type UserPermissionUncheckedCreateWithoutPermissionInput = {
    id?: string
    userId: string
  }

  export type UserPermissionCreateOrConnectWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionCreateManyPermissionInputEnvelope = {
    data: UserPermissionCreateManyPermissionInput | UserPermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type UserCreateWithoutDirectorOfInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    File?: DealFileCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    retail?: RetailCreateNestedManyWithoutUserInput
    department: DepartmentCreateNestedOneWithoutUsersInput
    login?: UserLoginCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    userFilters?: UserFilterCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDirectorOfInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    File?: DealFileUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    retail?: RetailUncheckedCreateNestedManyWithoutUserInput
    login?: UserLoginUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    userFilters?: UserFilterUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDirectorOfInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDirectorOfInput, UserUncheckedCreateWithoutDirectorOfInput>
  }

  export type UserCreateWithoutDepartmentInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    File?: DealFileCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    retail?: RetailCreateNestedManyWithoutUserInput
    login?: UserLoginCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    userFilters?: UserFilterCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    File?: DealFileUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    retail?: RetailUncheckedCreateNestedManyWithoutUserInput
    login?: UserLoginUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    userFilters?: UserFilterUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserCreateManyDepartmentInputEnvelope = {
    data: UserCreateManyDepartmentInput | UserCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDirectorOfInput = {
    update: XOR<UserUpdateWithoutDirectorOfInput, UserUncheckedUpdateWithoutDirectorOfInput>
    create: XOR<UserCreateWithoutDirectorOfInput, UserUncheckedCreateWithoutDirectorOfInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDirectorOfInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDirectorOfInput, UserUncheckedUpdateWithoutDirectorOfInput>
  }

  export type UserUpdateWithoutDirectorOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    File?: DealFileUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    retail?: RetailUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
    login?: UserLoginUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDirectorOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    File?: DealFileUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    retail?: RetailUncheckedUpdateManyWithoutUserNestedInput
    login?: UserLoginUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    user_password?: StringFilter<"User"> | string
    position?: StringFilter<"User"> | string
    departmentId?: IntFilter<"User"> | number
    role?: EnumRoleFilter<"User"> | $Enums.Role
    lastlogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserCreateWithoutProjectsInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    File?: DealFileCreateNestedManyWithoutUserInput
    retail?: RetailCreateNestedManyWithoutUserInput
    department: DepartmentCreateNestedOneWithoutUsersInput
    login?: UserLoginCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    userFilters?: UserFilterCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    File?: DealFileUncheckedCreateNestedManyWithoutUserInput
    retail?: RetailUncheckedCreateNestedManyWithoutUserInput
    login?: UserLoginUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    userFilters?: UserFilterUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type AdditionalContactCreateWithoutProjectsInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    position?: string | null
    retails?: RetailCreateNestedManyWithoutAdditionalContactsInput
  }

  export type AdditionalContactUncheckedCreateWithoutProjectsInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    position?: string | null
    retails?: RetailUncheckedCreateNestedManyWithoutAdditionalContactsInput
  }

  export type AdditionalContactCreateOrConnectWithoutProjectsInput = {
    where: AdditionalContactWhereUniqueInput
    create: XOR<AdditionalContactCreateWithoutProjectsInput, AdditionalContactUncheckedCreateWithoutProjectsInput>
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    File?: DealFileUpdateManyWithoutUserNestedInput
    retail?: RetailUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
    login?: UserLoginUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    File?: DealFileUncheckedUpdateManyWithoutUserNestedInput
    retail?: RetailUncheckedUpdateManyWithoutUserNestedInput
    login?: UserLoginUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AdditionalContactUpsertWithWhereUniqueWithoutProjectsInput = {
    where: AdditionalContactWhereUniqueInput
    update: XOR<AdditionalContactUpdateWithoutProjectsInput, AdditionalContactUncheckedUpdateWithoutProjectsInput>
    create: XOR<AdditionalContactCreateWithoutProjectsInput, AdditionalContactUncheckedCreateWithoutProjectsInput>
  }

  export type AdditionalContactUpdateWithWhereUniqueWithoutProjectsInput = {
    where: AdditionalContactWhereUniqueInput
    data: XOR<AdditionalContactUpdateWithoutProjectsInput, AdditionalContactUncheckedUpdateWithoutProjectsInput>
  }

  export type AdditionalContactUpdateManyWithWhereWithoutProjectsInput = {
    where: AdditionalContactScalarWhereInput
    data: XOR<AdditionalContactUpdateManyMutationInput, AdditionalContactUncheckedUpdateManyWithoutProjectsInput>
  }

  export type AdditionalContactScalarWhereInput = {
    AND?: AdditionalContactScalarWhereInput | AdditionalContactScalarWhereInput[]
    OR?: AdditionalContactScalarWhereInput[]
    NOT?: AdditionalContactScalarWhereInput | AdditionalContactScalarWhereInput[]
    id?: StringFilter<"AdditionalContact"> | string
    name?: StringFilter<"AdditionalContact"> | string
    phone?: StringNullableFilter<"AdditionalContact"> | string | null
    email?: StringNullableFilter<"AdditionalContact"> | string | null
    position?: StringNullableFilter<"AdditionalContact"> | string | null
  }

  export type UserCreateWithoutRetailInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    File?: DealFileCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    department: DepartmentCreateNestedOneWithoutUsersInput
    login?: UserLoginCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    userFilters?: UserFilterCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRetailInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    File?: DealFileUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    login?: UserLoginUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    userFilters?: UserFilterUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRetailInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRetailInput, UserUncheckedCreateWithoutRetailInput>
  }

  export type AdditionalContactCreateWithoutRetailsInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    position?: string | null
    projects?: ProjectCreateNestedManyWithoutAdditionalContactsInput
  }

  export type AdditionalContactUncheckedCreateWithoutRetailsInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    position?: string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutAdditionalContactsInput
  }

  export type AdditionalContactCreateOrConnectWithoutRetailsInput = {
    where: AdditionalContactWhereUniqueInput
    create: XOR<AdditionalContactCreateWithoutRetailsInput, AdditionalContactUncheckedCreateWithoutRetailsInput>
  }

  export type UserUpsertWithoutRetailInput = {
    update: XOR<UserUpdateWithoutRetailInput, UserUncheckedUpdateWithoutRetailInput>
    create: XOR<UserCreateWithoutRetailInput, UserUncheckedCreateWithoutRetailInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRetailInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRetailInput, UserUncheckedUpdateWithoutRetailInput>
  }

  export type UserUpdateWithoutRetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    File?: DealFileUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
    login?: UserLoginUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    File?: DealFileUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    login?: UserLoginUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AdditionalContactUpsertWithWhereUniqueWithoutRetailsInput = {
    where: AdditionalContactWhereUniqueInput
    update: XOR<AdditionalContactUpdateWithoutRetailsInput, AdditionalContactUncheckedUpdateWithoutRetailsInput>
    create: XOR<AdditionalContactCreateWithoutRetailsInput, AdditionalContactUncheckedCreateWithoutRetailsInput>
  }

  export type AdditionalContactUpdateWithWhereUniqueWithoutRetailsInput = {
    where: AdditionalContactWhereUniqueInput
    data: XOR<AdditionalContactUpdateWithoutRetailsInput, AdditionalContactUncheckedUpdateWithoutRetailsInput>
  }

  export type AdditionalContactUpdateManyWithWhereWithoutRetailsInput = {
    where: AdditionalContactScalarWhereInput
    data: XOR<AdditionalContactUpdateManyMutationInput, AdditionalContactUncheckedUpdateManyWithoutRetailsInput>
  }

  export type ProjectCreateWithoutAdditionalContactsInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionProject
    deliveryType?: $Enums.DeliveryProject | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    amountPurchase?: Decimal | DecimalJsLike | number | string | null
    amountWork?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    comments: string
    dealStatus: $Enums.StatusProject
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutAdditionalContactsInput = {
    id?: string
    userId: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionProject
    deliveryType?: $Enums.DeliveryProject | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    amountPurchase?: Decimal | DecimalJsLike | number | string | null
    amountWork?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    comments: string
    dealStatus: $Enums.StatusProject
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateOrConnectWithoutAdditionalContactsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAdditionalContactsInput, ProjectUncheckedCreateWithoutAdditionalContactsInput>
  }

  export type RetailCreateWithoutAdditionalContactsInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionRetail
    deliveryType?: $Enums.DeliveryRetail | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    dealStatus: $Enums.StatusRetail
    comments: string
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRetailInput
  }

  export type RetailUncheckedCreateWithoutAdditionalContactsInput = {
    id?: string
    userId: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionRetail
    deliveryType?: $Enums.DeliveryRetail | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    dealStatus: $Enums.StatusRetail
    comments: string
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RetailCreateOrConnectWithoutAdditionalContactsInput = {
    where: RetailWhereUniqueInput
    create: XOR<RetailCreateWithoutAdditionalContactsInput, RetailUncheckedCreateWithoutAdditionalContactsInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutAdditionalContactsInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutAdditionalContactsInput, ProjectUncheckedUpdateWithoutAdditionalContactsInput>
    create: XOR<ProjectCreateWithoutAdditionalContactsInput, ProjectUncheckedCreateWithoutAdditionalContactsInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutAdditionalContactsInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutAdditionalContactsInput, ProjectUncheckedUpdateWithoutAdditionalContactsInput>
  }

  export type ProjectUpdateManyWithWhereWithoutAdditionalContactsInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutAdditionalContactsInput>
  }

  export type RetailUpsertWithWhereUniqueWithoutAdditionalContactsInput = {
    where: RetailWhereUniqueInput
    update: XOR<RetailUpdateWithoutAdditionalContactsInput, RetailUncheckedUpdateWithoutAdditionalContactsInput>
    create: XOR<RetailCreateWithoutAdditionalContactsInput, RetailUncheckedCreateWithoutAdditionalContactsInput>
  }

  export type RetailUpdateWithWhereUniqueWithoutAdditionalContactsInput = {
    where: RetailWhereUniqueInput
    data: XOR<RetailUpdateWithoutAdditionalContactsInput, RetailUncheckedUpdateWithoutAdditionalContactsInput>
  }

  export type RetailUpdateManyWithWhereWithoutAdditionalContactsInput = {
    where: RetailScalarWhereInput
    data: XOR<RetailUpdateManyMutationInput, RetailUncheckedUpdateManyWithoutAdditionalContactsInput>
  }

  export type UserCreateWithoutLoginInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    File?: DealFileCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    retail?: RetailCreateNestedManyWithoutUserInput
    department: DepartmentCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    userFilters?: UserFilterCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLoginInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    File?: DealFileUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    retail?: RetailUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    userFilters?: UserFilterUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLoginInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLoginInput, UserUncheckedCreateWithoutLoginInput>
  }

  export type UserUpsertWithoutLoginInput = {
    update: XOR<UserUpdateWithoutLoginInput, UserUncheckedUpdateWithoutLoginInput>
    create: XOR<UserCreateWithoutLoginInput, UserUncheckedCreateWithoutLoginInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLoginInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLoginInput, UserUncheckedUpdateWithoutLoginInput>
  }

  export type UserUpdateWithoutLoginInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    File?: DealFileUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    retail?: RetailUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLoginInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    File?: DealFileUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    retail?: RetailUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFileInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    retail?: RetailCreateNestedManyWithoutUserInput
    department: DepartmentCreateNestedOneWithoutUsersInput
    login?: UserLoginCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    userFilters?: UserFilterCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFileInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    retail?: RetailUncheckedCreateNestedManyWithoutUserInput
    login?: UserLoginUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    userFilters?: UserFilterUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFileInput, UserUncheckedCreateWithoutFileInput>
  }

  export type UserUpsertWithoutFileInput = {
    update: XOR<UserUpdateWithoutFileInput, UserUncheckedUpdateWithoutFileInput>
    create: XOR<UserCreateWithoutFileInput, UserUncheckedCreateWithoutFileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFileInput, UserUncheckedUpdateWithoutFileInput>
  }

  export type UserUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    retail?: RetailUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
    login?: UserLoginUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    retail?: RetailUncheckedUpdateManyWithoutUserNestedInput
    login?: UserLoginUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserFiltersInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    File?: DealFileCreateNestedManyWithoutUserInput
    projects?: ProjectCreateNestedManyWithoutUserInput
    retail?: RetailCreateNestedManyWithoutUserInput
    department: DepartmentCreateNestedOneWithoutUsersInput
    login?: UserLoginCreateNestedManyWithoutUserInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserFiltersInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    departmentId: number
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    directorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    File?: DealFileUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUncheckedCreateNestedManyWithoutUserInput
    retail?: RetailUncheckedCreateNestedManyWithoutUserInput
    login?: UserLoginUncheckedCreateNestedManyWithoutUserInput
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserFiltersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserFiltersInput, UserUncheckedCreateWithoutUserFiltersInput>
  }

  export type UserUpsertWithoutUserFiltersInput = {
    update: XOR<UserUpdateWithoutUserFiltersInput, UserUncheckedUpdateWithoutUserFiltersInput>
    create: XOR<UserCreateWithoutUserFiltersInput, UserUncheckedCreateWithoutUserFiltersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserFiltersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserFiltersInput, UserUncheckedUpdateWithoutUserFiltersInput>
  }

  export type UserUpdateWithoutUserFiltersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    File?: DealFileUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    retail?: RetailUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneRequiredWithoutUsersNestedInput
    login?: UserLoginUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserFiltersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    File?: DealFileUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    retail?: RetailUncheckedUpdateManyWithoutUserNestedInput
    login?: UserLoginUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DealFileCreateManyUserInput = {
    id?: string
    name: string
    localPath: string
    storageType?: $Enums.StorageType
    dealId: string
    dealType: $Enums.DealType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateManyUserInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionProject
    deliveryType?: $Enums.DeliveryProject | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    amountPurchase?: Decimal | DecimalJsLike | number | string | null
    amountWork?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    comments: string
    dealStatus: $Enums.StatusProject
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RetailCreateManyUserInput = {
    id?: string
    type?: $Enums.DealType
    dateRequest: Date | string
    nameDeal: string
    nameObject: string
    direction: $Enums.DirectionRetail
    deliveryType?: $Enums.DeliveryRetail | null
    contact: string
    phone?: string | null
    email?: string | null
    amountCP?: Decimal | DecimalJsLike | number | string | null
    delta?: Decimal | DecimalJsLike | number | string | null
    dealStatus: $Enums.StatusRetail
    comments: string
    plannedDateConnection?: Date | string | null
    resource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserLoginCreateManyUserInput = {
    id?: string
    loginAt?: Date | string
  }

  export type UserPermissionCreateManyUserInput = {
    id?: string
    permissionId: string
  }

  export type UserFilterCreateManyUserInput = {
    id?: string
    filterName: string
    filterValue: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DealFileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    storageType?: EnumStorageTypeFieldUpdateOperationsInput | $Enums.StorageType
    dealId?: StringFieldUpdateOperationsInput | string
    dealType?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealFileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    storageType?: EnumStorageTypeFieldUpdateOperationsInput | $Enums.StorageType
    dealId?: StringFieldUpdateOperationsInput | string
    dealType?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealFileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    localPath?: StringFieldUpdateOperationsInput | string
    storageType?: EnumStorageTypeFieldUpdateOperationsInput | $Enums.StorageType
    dealId?: StringFieldUpdateOperationsInput | string
    dealType?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalContacts?: AdditionalContactUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalContacts?: AdditionalContactUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetailUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalContacts?: AdditionalContactUpdateManyWithoutRetailsNestedInput
  }

  export type RetailUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    additionalContacts?: AdditionalContactUncheckedUpdateManyWithoutRetailsNestedInput
  }

  export type RetailUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLoginUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLoginUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLoginUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: PermissionUpdateOneRequiredWithoutUserPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type UserFilterUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    filterName?: StringFieldUpdateOperationsInput | string
    filterValue?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFilterUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    filterName?: StringFieldUpdateOperationsInput | string
    filterValue?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFilterUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    filterName?: StringFieldUpdateOperationsInput | string
    filterValue?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionCreateManyPermissionInput = {
    id?: string
    userId: string
  }

  export type UserPermissionUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyDepartmentInput = {
    id?: string
    username: string
    email: string
    phone: string
    user_password: string
    position: string
    role: $Enums.Role
    lastlogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    File?: DealFileUpdateManyWithoutUserNestedInput
    projects?: ProjectUpdateManyWithoutUserNestedInput
    retail?: RetailUpdateManyWithoutUserNestedInput
    login?: UserLoginUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    File?: DealFileUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutUserNestedInput
    retail?: RetailUncheckedUpdateManyWithoutUserNestedInput
    login?: UserLoginUncheckedUpdateManyWithoutUserNestedInput
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    userFilters?: UserFilterUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    lastlogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdditionalContactUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    retails?: RetailUpdateManyWithoutAdditionalContactsNestedInput
  }

  export type AdditionalContactUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    retails?: RetailUncheckedUpdateManyWithoutAdditionalContactsNestedInput
  }

  export type AdditionalContactUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdditionalContactUpdateWithoutRetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUpdateManyWithoutAdditionalContactsNestedInput
  }

  export type AdditionalContactUncheckedUpdateWithoutRetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUncheckedUpdateManyWithoutAdditionalContactsNestedInput
  }

  export type AdditionalContactUncheckedUpdateManyWithoutRetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUpdateWithoutAdditionalContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAdditionalContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyWithoutAdditionalContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionProjectFieldUpdateOperationsInput | $Enums.DirectionProject
    deliveryType?: NullableEnumDeliveryProjectFieldUpdateOperationsInput | $Enums.DeliveryProject | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountPurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    amountWork?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    comments?: StringFieldUpdateOperationsInput | string
    dealStatus?: EnumStatusProjectFieldUpdateOperationsInput | $Enums.StatusProject
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetailUpdateWithoutAdditionalContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRetailNestedInput
  }

  export type RetailUncheckedUpdateWithoutAdditionalContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RetailUncheckedUpdateManyWithoutAdditionalContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumDealTypeFieldUpdateOperationsInput | $Enums.DealType
    dateRequest?: DateTimeFieldUpdateOperationsInput | Date | string
    nameDeal?: StringFieldUpdateOperationsInput | string
    nameObject?: StringFieldUpdateOperationsInput | string
    direction?: EnumDirectionRetailFieldUpdateOperationsInput | $Enums.DirectionRetail
    deliveryType?: NullableEnumDeliveryRetailFieldUpdateOperationsInput | $Enums.DeliveryRetail | null
    contact?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    amountCP?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    delta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dealStatus?: EnumStatusRetailFieldUpdateOperationsInput | $Enums.StatusRetail
    comments?: StringFieldUpdateOperationsInput | string
    plannedDateConnection?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}